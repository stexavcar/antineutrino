import re
from buildutils import read_lines_from, escape_string
from os.path import abspath, join, basename
from testutils import CCTestCase, is_selected
Import('config env config build target prefix')

plankton_test_files = read_lines_from(join(config['root'], 'test', 'plankton', 'tests.list'))

generated_file_template = """ \
/* This file was generated by test/plankton/SConscript from the test
   case %(file)s. */
%(test_decls)s

#line 1 "%(file)s"
%(contents)s
#line 1
#include <stdlib.h>
#include <stdio.h>
#include <string.h>
int main(int argc, const char *argv[]) {
  int has_run_tests = 0;
  int i;
  for (i = 1; i < argc; i++) {
    const char *current = argv[i];\
    %(cases)s
  }
  if (!has_run_tests)
    printf("Warning: no tests were run.\\n");
  exit(0);
}
"""

test_case_template = """
    if (strcmp(current, "%(name)s") == 0) {
      has_run_tests = 1;
      test_%(name)s();
    }\
"""

test_decl_template = """
static void test_%(name)s();\
"""

test_case_matcher = re.compile(r'^\s*static\s+void\s+test_(\w+)\s*\(\s*\)\s*{\s*$', re.M)

def find_test_functions(test_case):
  return test_case_matcher.findall(File(test_case).get_contents())

def generate_runner(source, target, env):
  source_file_name = str(source[0])
  contents = File(source_file_name).get_contents()
  matches = test_case_matcher.findall(contents)
  cases = ''
  decls = ''
  for match in matches:
    cases += (test_case_template % { 'name': match })
    decls += (test_decl_template % { 'name': match })
  text = generated_file_template % {
    'file': escape_string(source_file_name),
    'contents': contents,
    'cases': cases,
    'test_decls': decls
  }
  output = open(str(target[0]), "w")
  output.write(text)
  output.close()

env['BUILDERS']['GenerateRunner'] = Builder(action = generate_runner)

def add_test_cases():
  for test_file in plankton_test_files:
    if not is_selected(config, test_file): continue
    file_name_base = test_file[:-2]
    # Add test cases to the list of scheduled tests
    generated_name = file_name_base + '-runner.c'
    # Ensure that the runner script has been built
    generate = env.GenerateRunner(generated_name, test_file)
    # Ensure that the test program has been built
    program = env.Program(file_name_base, [generate, config[prefix + 'static-library']])
    config['check-deps'].append(program)
    functions = find_test_functions(test_file)
    # Why must scons' model for absolute/relative paths be so fucking
    # weak and useless that I have to do this crap!?!  Whoever wrote
    # this shit owes me a beer for wasting two fucking hours kicking
    # this worthless junk into shape!
    executable = abspath(join(build, str(program[0])))
    for function in functions:
      test_case = CCTestCase(executable, function, target)
      config['tests'].append(test_case)

add_test_cases()
