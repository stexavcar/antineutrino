protocol Matrix {

  def to_string() -> "#<a Matrix: ${this.objs}>";
  
  def [row, col] -> this.objs[row][col];
  
  def [row, col]:=(val) -> this.objs[row][col] := val;
  
  static def make(objs) {
    // Create a copy of the objects given as arguments to make this
    // matrix mutable.
    def backbone := new Array(size: |objs|);
    for (i in 0 .. |objs|) {
      def row := new Array(size: |objs[i]|);
      backbone[i] := row;
      for (j in 0 .. |row|)
        row[j] := objs[i][j];
    }
    return new Matrix() { objs: backbone };
  }

}

def test_multi_index() {
  def m := Matrix.make([
    [1, 2, 3],
    [4, 5, 6],
    [7, 8, 9]
  ]);
  assert m[0, 0] = 1;
  assert m[0, 1] = 2;
  assert m[0, 2] = 3;
  assert m[1, 0] = 4;
  assert m[1, 1] = 5;
  assert m[1, 2] = 6;
  assert m[2, 0] = 7;
  assert m[2, 1] = 8;
  assert m[2, 2] = 9;
  m[1, 1] := 100;
  assert m[0, 0] = 1;
  assert m[0, 1] = 2;
  assert m[0, 2] = 3;
  assert m[1, 0] = 4;
  assert m[1, 1] = 100;
  assert m[1, 2] = 6;
  assert m[2, 0] = 7;
  assert m[2, 1] = 8;
  assert m[2, 2] = 9;  
}

def main() {
  test_multi_index();
}
