import os
from os.path import join, walk, abspath, exists
from buildutils import apply_items, read_lines_from, read_files_from
from pyneu.internal.scanner import KEYWORDS, MODIFIERS
from testutils import run_neutrino_tests, is_selected, CustomTestCase, Result, PyNeutrinoTestCase, relative
Import('config common prefix properties target build')

# Instantiate the test builders for each configuration
env = common.Copy()
apply_items(env, properties)

old_build = build

# Utilities for tests to be run using the bootstrap compiler

pyneu_path = join(config['root'], 'tools', 'pyneu')
compiler = join(pyneu_path, 'main.py')
env['BUILDERS']['CompilePyNeutrinoTest'] = Builder(action = "python " + compiler + " -c " + join(config['src'], 'utils', 'consts.h') + ' ' + join(config['root'], 'lib') + " $SOURCE -o $TARGET")

executable = relative(config['bin'], str(config[prefix + 'program']))
natives = relative(config['bin'], str(config[prefix + 'natives']))

pyneu_path = join(config['root'], 'tools', 'pyneu')
pyneu_files = [ join(pyneu_path, f) for f in read_files_from({ }, pyneu_path, join(pyneu_path, 'pyneu.list')) ]

lib_path = join(config['root'], 'lib')
lib_files = [ ]
for (root, dirs, files) in os.walk(lib_path):
  for file in files:
    if file.endswith('.n'):
      lib_files.append(join(root, file))

def add_pyneu_test(arg, dir, fnames):
  tests = []
  for fname in fnames:
    if fname.endswith('.n') and is_selected(config, fname):
      full_path = join(dir, fname)
      short_name = fname[:-2]
      compiled_name = short_name + '.nc'
      compile = env.CompilePyNeutrinoTest(compiled_name, full_path)
      env.Depends(compile, pyneu_files + lib_files)
      test_file = relative(config['bin'], join(build, compiled_name))
      test_case = PyNeutrinoTestCase(executable, test_file, [ natives ], target)
      config['tests'].append(test_case)
      config['check-deps'].append(compile)
      config['check-deps'].append(executable)

def add_pyneu_tests_from(root):
  walk(root, add_pyneu_test, None)

env.add_pyneu_tests_from = add_pyneu_tests_from

suites = read_lines_from(join(config['root'], 'test', 'suites.list'))

for suite in suites:
  build = abspath(join(old_build, suite))
  env.SConscript(
    join(suite, 'SConscript'),
    exports = 'config env target prefix config build',
    duplicate = False
  )

# Checks that the files listed in misc/keyword-checks.list contain
# all keywords between the specified markers
def check_keywords():
  list = join(config['root'], 'misc', 'etc', 'keyword-checks.list')
  for name in read_lines_from(list):
    lines = [ ]
    # Read the contents between the begin and end markers into the
    # lines list
    seen_begin_marker = False
    for line in open(join(config['root'], name)):
      if seen_begin_marker:
        if "-- end keywords --" in line:
          seen_begin_marker = False
          break
        else:
          lines.append(line)
      elif "-- begin keywords --" in line:
        seen_begin_marker = True
    assert not seen_begin_marker
    block = ''.join(lines)
    # Test if each keyword occurs in the block we just read
    for keyword in (KEYWORDS.keys() + MODIFIERS.keys()):
      if keyword not in block:
        return Result(Result.FAILED, error="Keyword '" + keyword + "' not present in " + name)
  return Result(Result.PASSED)

if is_selected(config, 'keywords'):
  test = CustomTestCase('check keywords', check_keywords)
  config['tests'].append(test)
