@no_override
protocol neu_neu_tests_t;

@cast
@type(neu_neu_tests_t)
def neu_neu_tests_t.new() {
  def addr := libc.malloc(int32_t.of(4));
  addr[int32_t.of(0)] := int32_t.of(0);
  addr;
}

@type(int32_t)
def (this is neu_neu_tests_t).count
 => this.addr[int32_t.of(0)];

def (this is neu_neu_tests_t).count:=(v is int32_t)
 => this.addr[int32_t.of(0)] := v;

def (this is neu_neu_tests_t).on_start(name is char_ptr_t) {
  libc.puts(name);
  this.count := (this.count + int32_t.of(1));
}

@inline
@type(int32_t)
@intrinsic("debug_interrupt")
def neu_neu_tests_t.fail();

@cast
@type(address_t)
def (this is neu_neu_tests_t).addr => this;

def (this is neu_neu_tests_t).assert_true(arg is bool_t) {
  if arg
    then int32_t.of(0);
    else neu_neu_tests_t.fail();
}

def (this is neu_neu_tests_t).assert_equal(a is int32_t, b is int32_t)
 => this.assert_true(a = b);

def (this is neu_neu_tests_t).free() => libc.free(this.addr);

@type(int32_t)
def (this is neu_neu_tests_t).run() {
  this.test_int32_t();
  this.test_malloc();
  this.test_char_ptr_t();
  this.test_static_data();
  this.test_values();
  this.test_control();
  this.count;
}
