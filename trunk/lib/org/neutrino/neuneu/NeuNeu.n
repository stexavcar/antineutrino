protocol EntryPoint;

@boot_level_0
@entry_point("neuneu") // Make this callable from the java implementation
@neuneu_entry_point // Mark this as the entry point for the neutrino implementation
def Boot.entry_point() {
  LibC.exit(Boot.boot());
}

// --- L i b   C ---

@intrinsic
protocol LibC;

@boot_level_0
@libc("_sleep")
@type("int32_t")
def LibC.sleep(arg is int32_t);

@boot_level_0
@libc("_exit")
def LibC.exit(arg is int32_t);

@boot_level_0
@libc("_malloc")
@type("int32_t")
def LibC.malloc(arg is int32_t);

@boot_level_0
@libc("_putchar")
@type("int32_t")
def LibC.putchar(arg is int32_t);

// --- B o o t ---

protocol Boot;

@boot_level_0
@type("int32_t")
def Boot.first(x is int32_t, y is int32_t) -> x;

@boot_level_0
@type("int32_t")
def Boot.second(x is int32_t, y is int32_t) -> y;

@boot_level_0
@type("int32_t")
def Boot.add(x is int32_t, y is int32_t) -> x + y;

@boot_level_0
def Boot.hello_world() {
  LibC.putchar(int32_t.of(72));
  LibC.putchar(int32_t.of(101));  
  LibC.putchar(int32_t.of(108));
  LibC.putchar(int32_t.of(108));
  LibC.putchar(int32_t.of(111));
  LibC.putchar(int32_t.of(32));  
  LibC.putchar(int32_t.of(87));  
  LibC.putchar(int32_t.of(111));  
  LibC.putchar(int32_t.of(114));  
  LibC.putchar(int32_t.of(108));  
  LibC.putchar(int32_t.of(100));  
  LibC.putchar(int32_t.of(33));  
  LibC.putchar(int32_t.of(10));  
}

@boot_level_0
@type("int32_t")
def Boot.boot() {
  def time := Boot.add(int32_t.of(2), int32_t.of(3));
  def one := Boot.first(int32_t.of(74), int32_t.of(93));
  def two := Boot.second(int32_t.of(16), int32_t.of(53));
  Boot.hello_world();
  if one != two
    then int32_t.of(1);
    else int32_t.of(2);
}
