protocol HanoiDisk;

def HanoiDisk.new(size) -> new HanoiDisk {
  size := size,
  next_ := new Ref(null)
}

def (this is HanoiDisk).next -> this.next_.get();

protocol Hanoi;

def Hanoi.new() -> new Hanoi {
  piles := new ArrayList [null, null, null],
  moves := new Ref(0)
}

def (this is Hanoi).run(size) {
  this.build(0, size);
  this.move(0, 1, size);
  this.moves.get();
}

def (this is Hanoi).move(from, to, disks) {
  if disks = 1 then {
    this.move_top(from, to);
  } else {
    def other := (3 - from) - to;
    this.move(from, other, disks - 1);
    this.move_top(from, to);
    this.move(other, to, disks - 1);
  }
}

def (this is Hanoi).move_top(from, to) {
  this.push(to, this.pop(from));
  this.moves.set(this.moves.get() + 1);
}

def (this is Hanoi).build(pile, disks) {
  for (i : disks .. 0)
    this.push(pile, new HanoiDisk(i));
}

def (this is Hanoi).push(pile, disk) {
  def top := this.piles[pile];
  if (top != null) and (disk.size >= top.size) then
    fail();
  disk.next_.set(top);
  this.piles[pile] := disk;
}

def (this is Hanoi).pop(pile) {
  def top := this.piles[pile];
  if top = null then fail();
  this.piles[pile] := top.next;
  top.next_.set(null);
  top;
}

def run_hanoi(size) -> new Hanoi().run(size);

@entry_point("hanoi")
def hanoi() {
  print(run_hanoi(7));
}
