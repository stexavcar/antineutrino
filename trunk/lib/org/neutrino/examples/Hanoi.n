protocol HanoiDisk {

  @static def proto.new(size:) => new HanoiDisk {
    size := size,
    next := null
  }

}

protocol Hanoi {

  @static def proto.new() => new Hanoi {
    piles := new ArrayList [null, null, null],
    moves := 0
  }

  def this.run(size:) {
    this.build(pile: 0, disks: size);
    this.move(from: 0, to: 1, disks: size);
    this.moves;
  }

  def this.move(from:, to:, disks:) {
    if disks = 1 then {
      this.move_top(from, to);
    } else {
      def other := (3 - from) - to;
      this.move(from, other, disks - 1);
      this.move_top(from, to);
      this.move(other, to, disks - 1);
    }
  }

  def this.move_top(from, to) {
    this.push(to, this.pop(from));
    this.moves := this.moves + 1;
  }

  def this.build(pile:, disks:) {
    for (i in disks .. 0)
      this.push(pile, new HanoiDisk(i));
  }

  def this.push(pile, disk) {
    def top := this.piles[pile];
    if (top != null) and (disk.size >= top.size) then
      fail();
    disk.next := top;
    this.piles[pile] := disk;
  }

  def this.pop(pile) {
    def top := this.piles[pile];
    if top = null then fail();
    this.piles[pile] := top.next;
    top.next := null;
    top;
  }

}

def run_hanoi(size:) => new Hanoi().run(size);

@entry_point("hanoi")
def hanoi() {
  print(run_hanoi(size: 7));
}
