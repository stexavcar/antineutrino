def kPlanktonIntTag := 0;
def kPlanktonStringTag := 1;
def kPlanktonNullTag := 2;
def kPlanktonTrueTag := 3;
def kPlanktonFalseTag := 4;

protocol PlanktonEncoder;

def PlanktonEncoder.new(class_index) -> new PlanktonEncoder {
  class_index := class_index,
  out := new LowLevelEncoder()
}

def (this is PlanktonEncoder).to_blob()
 -> this.out.to_blob();

def (this is PlanktonEncoder).write(str is String) {
  this.out.write(kPlanktonStringTag);
  this.out.write_unsigned(str.length);
  for (chr : str.ascii_characters)
    this.out.write(chr);
}

def (this is PlanktonEncoder).write(obj is Integer) {
  this.out.write(kPlanktonIntTag);
  this.out.write_signed(obj);
}

protocol PlanktonDecoder;

def PlanktonDecoder.new_dispatcher() {
  def result := new HashMap();
  result[kPlanktonStringTag] := (fn (d) -> d.read_string());
  result[kPlanktonIntTag] := (fn (d) -> d.read_int());
  result;
}

def PlanktonDecoder.new(in, class_index) -> new PlanktonDecoder {
  in := in,
  class_index := class_index,
  dispatcher := PlanktonDecoder.new_dispatcher()
}

def (this is PlanktonDecoder).read()
 -> this.read(this.in.read());

def (this is PlanktonDecoder).read(tag) {
  def dispatcher := this.dispatcher[tag];
  if dispatcher = null
    then fail("Unknown tag %{tag}");
  dispatcher(this);
}

 def (this is PlanktonDecoder).read_string() {
   def length := this.in.read_unsigned();
   def buf := new StringStream();
   for (i : 0 .. length) {
     def ord := this.in.read();
     buf.add(string_from_ordinal(ord));
   }
   buf.to_string();
 }
 
 def (this is PlanktonDecoder).read_int()
  -> this.in.read_signed();
 