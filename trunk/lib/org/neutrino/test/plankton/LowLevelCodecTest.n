def (this is PlanktonTest).test_low_level_codec() {
  this.test_encoding();
  this.test_random_byte_encoding();
  this.test_unsigned_long_encoding();
  this.test_signed_long_encoding();
}

def (this is LowLevelEncoder).write(elms is PrimitiveArray) {
  for (elm : elms)
    this.write(elm);
}

def (this is PlanktonTest).test_encoding() {
  this.on_start("low level encoding");
  def empty := new LowLevelEncoder();
  empty.write(0);
  assert_equal(new ArrayList [0, 0, 0, 0, 0], new ArrayList(empty.to_blob()));
  def full := new LowLevelEncoder();
  full.write(#[16rFF, 16rFF, 16rFF, 16rFF, 16rFF, 16rFF, 16rFF, 16rFF]);
  assert_equal(
    new ArrayList [16rFF, 16rEF, 16rEF, 16rEF, 16rEF, 16rEF, 16rEF, 16rEF, 16rEF],
    new ArrayList(full.to_blob()));
  def half := new LowLevelEncoder();
  half.write(#[0, 0, 0, 0, 16rFF, 16rFF, 16rFF, 16rFF]);
  assert_equal(
    new ArrayList [16r0F, 0, 0, 16rEF, 16rEF, 16rEF, 16rEF],
    new ArrayList(half.to_blob()));
}

def (this is PlanktonTest).test_random_byte_encoding() {
  this.on_start("random byte encoding");
  def random := new Random(1105);
  def value_count := 64;
  def iteration_count := 8;
  def data := new MutablePrimitiveByteArray(value_count);
  for (i : 0 .. iteration_count) {
    def encoder := new LowLevelEncoder();
    random.next_bytes(data);
    for (j : 0 .. value_count)
      encoder.write(data[j]);
    def result := encoder.to_blob();
    def decoder := new LowLevelDecoder(new BlobInputStream(result));
    def found := new MutablePrimitiveByteArray(value_count);
    for (j : 0 .. value_count) {
      found[j] := decoder.read();
    }
    assert_equal(data, found);
  }
}

def (this is PlanktonTest).test_unsigned_long_encoding() {
  this.on_start("unsigned long encoding");
  def random := new Random(1129);
  def encoder := new LowLevelEncoder();
  def numbers := new ArrayList();
  for (i : 0 .. 64) {
    def value := Math.abs(random.next());
    numbers.add(value);
    encoder.write_unsigned(value);
  }
  def result := encoder.to_blob();
  def decoder := new LowLevelDecoder(new BlobInputStream(result));
  for (i : 0 .. 64) {
    assert_equal(numbers[i], decoder.read_unsigned());
  }
}

def (this is PlanktonTest).test_signed_long_encoding() {
  this.on_start("signed long encoding");
  def random := new Random(1129);
  def encoder := new LowLevelEncoder();
  def numbers := new ArrayList();
  for (i : 0 .. 64) {
    def value := random.next() >> 1;
    numbers.add(value);
    encoder.write_signed(value);
  }
  def result := encoder.to_blob();
  def decoder := new LowLevelDecoder(new BlobInputStream(result));
  for (i : 0 .. 64) {
    assert_equal(numbers[i], decoder.read_signed());
  }
}
