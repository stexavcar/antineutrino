def (this is LanguageTest).test_arrays() {
  this.test_simple_arrays();
  this.test_array_slice();
  this.test_mutable_arrays();
  this.test_maps();
}

def (this is LanguageTest).test_simple_arrays() {
  this.on_start("simple arrays");
  def e := #[1, 2, 3];
  assert_equal(3, e.length);
  assert_equal(1, e[0]);
  assert_equal(2, e[1]);
  assert_equal(3, e[2]);  
}

def (this is LanguageTest).test_array_slice() {
  this.on_start("array slices");
  def e := #[1, 2, 3, 4, 5];

  def s1 := e[0 .. 1];
  assert_equal(1, s1.length);
  assert_equal(1, s1[0]);

  def s2 := e[1 .. 4];
  assert_equal(3, s2.length);
  assert_equal(2, s2[0]);
  assert_equal(3, s2[1]);
  assert_equal(4, s2[2]);

  def s3 := e[4 .. 1];
  assert_equal(3, s2.length);
  assert_equal(5, s3[0]);
  assert_equal(4, s3[1]);
  assert_equal(3, s3[2]);
}

def (this is LanguageTest).test_mutable_arrays() {
  this.on_start("mutable arrays");
  def kSize := 10;
  def arr := new PrimitiveArray(kSize);
  assert_equal(kSize, arr.length);
  for (i in 0 .. kSize)
    assert_equal(null, arr[i]);
  for (i in 0 .. kSize)
    arr[i] := i * 3;
  for (i in 0 .. kSize)
    assert_equal(i * 3, arr[i]);
}

def (this is LanguageTest).test_maps() {
  this.on_start("maps");
  def m0 := #[0: "a", 1: "b"];
  assert_equal("a", m0[0]);
  assert_equal("b", m0[1]);
  def m1 := #["a": 0, "b": 1];
  assert_equal(0, m1["a"]);
  assert_equal(1, m1["b"]);
}
