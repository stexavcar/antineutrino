def (this is UtilsTest).test_array_lists() {
  this.test_simple_array_lists();
  this.test_array_list_comparison();
}

def (this is UtilsTest).test_simple_array_lists() {
  this.on_start("simple array lists");
  def kInitialSize := 5;
  def a := new ArrayList(kInitialSize);
  assert_equal(kInitialSize, a.length);
  for (def i : 0 .. kInitialSize)
    assert_equal(null, a[i]);
  for (def i : 0 .. kInitialSize)
    a[i] := i;
  for (def i : 0 .. kInitialSize)
    assert_equal(i, a[i]);
  for (def i : 0 .. 10) {
    a.add(i);
    assert_equal(kInitialSize + i + 1, a.length);
  }
  for (def i : 0 .. kInitialSize)
    assert_equal(i, a[i]);
  for (def i : 0 .. 10)
    assert_equal(i, a[kInitialSize + i]);

  // Construct from sequence
  def b := new ArrayList(0 .. 10);
  for (def i : 0 .. 10)
    assert_equal(i, b[i]);

  // Construct from ArrayList (also a Sequence)
  def c := new ArrayList(b);
  for (def el : b)
    assert_equal(el, c[el]);
}

def (this is UtilsTest).test_array_list_comparison() {
  this.on_start("array list comparison");
  assert_equal(new ArrayList [ 1, 2, 3 ], new ArrayList [ 1, 2, 3 ]);
  assert_true(new ArrayList [ 1, 2, 3, 4 ] != new ArrayList [ 1, 2, 3 ]);
  assert_true(new ArrayList [ 1, 2, 3 ] != new ArrayList [ 1, 2, 3, 4 ]);
  assert_true(new ArrayList [ 1, 2, 3 ] != new ArrayList [ 1, 2, 4 ]);
}
