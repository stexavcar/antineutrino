def (this is UtilsTest).test_hash_maps() {
  this.test_simple_hash_maps();
  this.test_large_hash_maps();
  this.test_hash_map_initialization();
  this.test_hash_map_iteration();
}

def (this is UtilsTest).test_simple_hash_maps() {
  this.on_start("simple hash maps");
  def map := new HashMap();
  assert_equal(0, map.size);
  assert_equal(null, map["a"]);
  assert_equal(null, map["b"]);
  map["a"] := 4;
  assert_equal(1, map.size);
  map["b"] := 5;
  assert_equal(2, map.size);
  assert_equal(4, map["a"]);
  assert_equal(5, map["b"]);
  map["a"] := 7;
  assert_equal(2, map.size);
  assert_equal(7, map["a"]);
  assert_equal(5, map["b"]);
}

def (this is UtilsTest).test_large_hash_maps() {
  this.on_start("large hash maps");
  def map := new HashMap();
  for (i : 0 .. 256) {
    if (i % 5) != 3 then
      map[i] := i.to_string();
  }
  for (i : 0 .. 256) {
    def expected := if (i % 5) != 3 then i.to_string() else null;
    assert_equal(expected, map[i]);
  }
}

def (this is UtilsTest).test_hash_map_initialization() {
  this.on_start("hash map initialization");
  def map := new HashMap() [ 2, 4, 6 ];
  assert_equal(2, map[0]);
  assert_equal(4, map[1]);
  assert_equal(6, map[2]);
  assert_equal(null, map[3]);
}

def (this is UtilsTest).test_hash_map_iteration() {
  this.on_start("hash map iteration");
  def map := new HashMap();
  map[0] := "a";
  map[1] := "b";
  map[3] := "k";
  def counts := new ArrayList [ 2, 2, 2, 2, 2, 2 ];
  def check_value(value) {
    if value = "a" then counts[0] := counts[0] - 1;
    else if value = "b" then counts[1] := counts[1] - 1;
    else if value = "k" then counts[2] := counts[2] - 1;
    else fail();
  }
  def check_key(key) {
    if key = 0 then counts[3] := counts[3] - 1;
    else if key = 1 then counts[4] := counts[4] - 1;
    else if key = 3 then counts[5] := counts[5] - 1;
    else fail();
  }
  for (value : map.values)
    check_value(value);
  for (key : map.keys)
    check_key(key);
  for (key, value : map) {
    check_key(key);
    check_value(value);
  }
  assert_equal(new ArrayList [ 0, 0, 0, 0, 0, 0 ], counts);
}
