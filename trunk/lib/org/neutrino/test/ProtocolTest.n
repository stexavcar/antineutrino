def LanguageTest::test_protocols() {
  this.test_simple_inheritance();
  this.test_this();
  this.test_mixed_operator_comparison();
}

protocol A;
def A::foo() -> 1;
def A::bar() -> 3;

protocol B;
def B is A;
def B::foo() -> 2;

def LanguageTest::test_simple_inheritance() {
  this.on_start("simple inheritance");
  def a := new A;
  assert_equal(1, a.foo());
  assert_equal(3, a.bar());
  def b := new B;
  assert_equal(2, b.foo());
  assert_equal(3, b.bar());
  def c := new B { baz := 4, bar := 5 };
  assert_equal(2, c.foo());
  assert_equal(5, c.bar());
  assert_equal(4, c.baz());
}

protocol Point;
def Point::size() -> (this.x * this.x) + (this.y * this.y);

def LanguageTest::test_this() {
  this.on_start("this");
  def p := new Point { x := 3, y := 4 };
  assert_equal(25, p.size());
}

def LanguageTest::test_mixed_operator_comparison() {
  this.on_start("mixed operator comparison");
  assert_false(1 = "1");
  assert_false(4 = null);
  assert_false(null = "x");
}
