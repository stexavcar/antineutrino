protocol Random;

def Random.new(seed) -> new MultiplyWithCarry(seed);

def (this is Random).next(limit)
 -> Math.abs(this.next()) % limit;

def (this is Random).next_bytes(data) {
  for (i : 0 .. data.length)
    data[i] := this.next(256);
}

/**
 * George Marsaglia's multiply-with-carry pseudo-random generator.
 * See http://www.ms.uky.edu/~mai/RandomNumber.
 */
protocol MultiplyWithCarry is Random;

def MultiplyWithCarry.new(seed) -> new MultiplyWithCarry {
  r_low := new Ref(362436069 + seed),
  r_high := new Ref(521288629 - seed)
}

def (this is MultiplyWithCarry).next() {
  def low := this.r_low.get();
  def high := this.r_high.get();
  def new_high := 23163 * (high & 16rFFFF) + (high >> 16);
  def new_low := 22965 * (low & 16rFFFF) + (low >> 16);
  this.r_low.set(new_low);
  this.r_high.set(new_high);
  ((new_high & 16rFFFF) << 16) | (low & 16rFFFF);
}
