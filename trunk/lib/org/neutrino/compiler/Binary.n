protocol Relocation;

def Relocation.new(assm, offset, target, is_relative) => new Relocation {
  assm := assm,
  offset := offset,
  target := target,
  is_relative := is_relative
}

protocol Binary;

def Binary.new(arch, file_format) => new Binary {
  arch := arch,
  file_format := file_format,
  code_entries := new ArrayList(),
  data_entries := new ArrayList(),
  relocs := new ArrayList()
}

protocol CodeBlock;

def CodeBlock.new(name, code) => new CodeBlock {
  name := name,
  code := code
}

def (this is Binary).add_relocation(reloc)
 => this.relocs.add(reloc);

def (this is Binary).add_code_block(name) {
  def assm := this.arch.new_assembler(this, name);
  this.code_entries.add(new {
    name := name,
    assm := assm
  });
  assm;
}

def (this is Binary).add_data_block(name) {
  def assm := new Data32Assembler(this, name);
  this.data_entries.add(new {
    name := name,
    assm := assm
  });
  assm;
}

def (this is Binary).encode {
  def out := new BlobStream;
  this.encode_file_format().encode(out);
  out.get_blob();
}

def (this is Binary).encode_file_format() {
  def result := this.file_format.builder(this);
  for (code_entry in this.code_entries)
    result.add_code_block(code_entry.name, code_entry.assm.code);
  for (data_entry in this.data_entries)
    result.add_data_block(data_entry.name, data_entry.assm.data);
  result.finalize();
  result;
}
