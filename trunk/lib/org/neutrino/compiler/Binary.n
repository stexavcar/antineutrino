protocol Relocation;

def Relocation.new(assm, offset, target, is_relative) => new Relocation {
  assm := assm,
  offset := offset,
  target := target,
  is_relative := is_relative
}

protocol Binary {

  @static def proto.new(arch, file_format) => new Binary {
    arch := arch,
    file_format := file_format,
    code_entries := new ArrayList(),
    data_entries := new ArrayList(),
    relocs := new ArrayList(),
    active_data_blocks := 0,
    data_block_offset := 0
  }
  
  def this.add_relocation(reloc)
   => this.relocs.add(reloc);

  def this.add_code_block(name) {
    def assm := this.arch.new_assembler(this, name);
    this.code_entries.add(new {
      name := name,
      assm := assm
    });
    assm;
  }

  def this.enter_data_block(name) {
    assert_equal(0, this.active_data_blocks);
    this.active_data_blocks := 1;
    def assm := new Data32Assembler(name, this, this.data_block_offset);
    this.data_entries.add(new {
      name := name,
      assm := assm
    });
    assm;
  }

  def this.exit_data_block(block) {
    assert_equal(1, this.active_data_blocks);
    this.active_data_blocks := 0;
    this.data_block_offset := this.data_block_offset + block.length;
  }

  def this.encode {
    def out := new BlobStream;
    this.encode_file_format().encode(out);
    out.get_blob();
  }

  def this.encode_file_format() {
    def result := this.file_format.builder(this);
    for (code_entry in this.code_entries)
      result.add_code_block(code_entry.name, code_entry.assm.code);
    for (data_entry in this.data_entries)
      result.add_data_block(data_entry.name, data_entry.assm.data);
    result.finalize();
    result;
  }
  
}

protocol CodeBlock;

def CodeBlock.new(name, code) => new CodeBlock {
  name := name,
  code := code
}
