protocol Binary;

def Binary.new() -> new Binary {
  entries := new ArrayList(0)
};

protocol BinaryEntry;

def BinaryEntry.new(name, code) -> new BinaryEntry {
  name := name,
  code := code
};

def (this: Binary).add_entry(name, code) {
  this.entries.add(new BinaryEntry(name, code));
}

def (this: Binary).encode {
  def out := new BlobStream;
  this.to_mach_o().encode(out);
  out.get_blob();
}

def (this: Binary).to_mach_o() {
  def result := new MachO();
  def text := new TextElement();
  for (def entry : this.entries)
    text.add_text(entry.code);
  result.add(text);
  // result.add(new DylinkerElement("/usr/lib/dyld"));
  result.add(new ThreadElement());
  result.add(new DylibElement("/usr/lib/libSystem.B.dylib", 0,
    new Version [111, 1, 5], new Version [1, 0, 0]));
  result;
}
