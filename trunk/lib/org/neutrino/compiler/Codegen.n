/* 
 * An extremely simple and dumb ia386 code generator.  Code for each operation
 * is generated from some very simple templates and all operations pop their
 * arguments from and leave their resulting value on the stack.  Values are
 * not transferred in registers between operations, through functions return
 * their values in EAX.
 */
protocol CodeGenerator;

def CodeGenerator.new(universe, assm) -> new CodeGenerator {
  universe := universe,
  assm := assm,
  intrinsics := new IntrinsicManager()
}

def (this is CodeGenerator).resolve_static_value(guide, node) -> null;

def (this is CodeGenerator).resolve_static_value(guide is GlobalGuide, node) {
  def name := guide.name(node);
  this.universe.lookup_static_global(name);
}

def (this is CodeGenerator).resolve_method(holder, method)
 -> this.universe.lookup_method(holder, method);

def (this is CodeGenerator).emit(guide is LiteralGuide, node) {
  this.assm.push(guide.value(node));
}

def (this is CodeGenerator).emit(guide is CallGuide, node) {
  def info := guide.info(node);
  def intrinsic := info.intrinsic;
  if intrinsic != null then {
    def handler := this.intrinsics[intrinsic];
    if handler = null
      then fail("Unimplemented intrinsic ${intrinsic}.");
    handler(this, guide, node);
  } else {
    def c_call := info.c_call;
    if c_call = null
      then fail("Illegal plain call ${Unparser.unparse(guide, node)}");
    this.emit_c_call(guide, node, c_call);
  }
}

def (this is CodeGenerator).emit(guide is ArgumentGuide, node) {
  def index := guide.index(node);
  // The arguments are just below EBP, the last one at offset 8, the previous
  // at 12, etc.
  this.assm.push(Memory.at_disp(rEbp, 4 + (4 * index)));
}

def (this is CodeGenerator).emit_c_call(guide, node, target) {
  def argc := guide.argc(node);
  // Push arguments onto the stack
  for (i : 0 .. argc) {
    def arg := guide.argument(node, i);
    this.emit(guide.resolve(arg), arg);
  }
  // Call the function
  this.assm.call(Symbol.local(target));
  // Pop the arguments off into a scratch register
  for (i : 0 .. argc)
    this.assm.pop(rEbx);
  // Push the result in EAX onto the stack
  this.assm.push(rEax);
}

def (this is CodeGenerator).static_value(guide is LiteralGuide, node)
 -> guide.value(node);

def (this is CodeGenerator).emit(guide is GlobalGuide, node) {
  // We don't support globals yet but we need something to take up
  // space on the stack so we push a 0 in place of the value.
  this.assm.push(0);
}

def (this is CodeGenerator).emit(guide is BlockGuide, node) {
  ref has_prev := false;
  for (elm_guide, elm_node : guide.elements(node)) {
    if has_prev
      then this.assm.pop(rEbx);
    this.emit(elm_guide, elm_node);
    has_prev := true;
  }
}

/* |      ...       |     ^
 * +----------------+     |
 * |    arg n-1     |     |  higher addresses
 * +----------------+     |
 * |     arg n      |
 * +----------------+
 * | return address |  <-  EBP
 * +----------------+
 * |    local 0     |
 * +----------------+     |
 * |    local 1     |     |  lower addresses
 * +----------------+     |
 * |      ...       |     v
 * +----------------+
 * |                |
 * |   expression   |
 * |                |
 * +----------------+  <-  ESP
 */

def local_address(index) -> (0 - 4) * (index + 1);

def (this is CodeGenerator).emit(guide is LocalDefGuide, node) {
  def value := guide.value(node);
  this.emit(guide.resolve(value), value);
  this.assm.pop(Memory.at_disp(rEbp, local_address(guide.index(node))));
  def body := guide.body(node);
  this.emit(guide.resolve(body), body);
}

def (this is CodeGenerator).emit(guide is LocalGuide, node) {
  this.assm.push(Memory.at_disp(rEbp, local_address(guide.index(node))));
}

def (this is CodeGenerator).is_intrinsic_protocol(value) -> false;
def (this is CodeGenerator).is_intrinsic_protocol(p is ProtocolAst)
 -> p.get_annotation("intrinsic") != null;
