protocol IntrinsicManager;

def IntrinsicManager.new() {
  def map := new HashMap();
  map["int32.cast"] := (fn (g, n, c) -> g.int32_cast(n, c));
  map["int32.add"] := (fn (g, n, c) -> g.int32_add(n, c));
  new IntrinsicManager { handlers := map };
}

def (this is IntrinsicManager)[name] -> this.handlers[name];

/* 
 * An extremely simple and dumb ia396 code generator.  Code for each operation
 * is generated from some very simple templates and all operations pop their
 * arguments from and leave their resulting value on the stack.  Values are
 * not transferred in registers between operations, through functions return
 * their values in EAX.
 */
protocol CodeGenerator;

def CodeGenerator.new(universe, assm) -> new CodeGenerator {
  universe := universe,
  assm := assm,
  intrinsics := new IntrinsicManager()
}

def (this is CodeGenerator).resolve_static_value(guide, node) -> null;

def (this is CodeGenerator).resolve_static_value(guide is GlobalGuide, node) {
  def name := guide.name(node);
  this.universe.lookup_static_global(name);
}

def (this is CodeGenerator).resolve_method(holder, method)
 -> this.universe.lookup_method(holder, method);

def (this is CodeGenerator).emit(guide is LiteralGuide, node) {
  this.assm.push(guide.value(node));
}

def (this is CodeGenerator).emit(guide is CallGuide, node) {
  def info := guide.info(node);
  def intrinsic := info.intrinsic;
  if intrinsic != null then {
    def handler := this.intrinsics[intrinsic];
    if handler = null
      then fail("Unimplemented intrinsic ${intrinsic}.");
    handler(this, guide, node);
  } else {
    def c_call := info.c_call;
    if c_call = null
      then fail("Illegal plain call ${Unparser.unparse(guide, node)}");
    this.emit_c_call(guide, node, c_call);
  }
}

def (this is CodeGenerator).emit(guide is ArgumentGuide, node) {
  def index := guide.index(node);
  // The arguments are just below EBP, the last one at offset 8, the previous
  // at 12, etc.
  this.assm.push(Memory.at_disp(rEbp, 4 + (4 * index)));
}

def (this is CodeGenerator).emit_c_call(guide, node, target) {
  def argc := guide.argc(node);
  // Push arguments onto the stack
  for (i : 1 .. argc) {
    def arg := guide.argument(node, i);
    this.emit(guide.resolve(arg), arg);
  }
  // Call the function
  this.assm.call(CallTarget.local(target));
  // Pop the arguments off into a scratch register
  for (i : 1 .. argc)
    this.assm.pop(rEbx);
  // Push the result in EAX onto the stack
  this.assm.push(rEax);
}

def (this is CodeGenerator).static_value(guide is LiteralGuide, node)
 -> guide.value(node);

def (this is CodeGenerator).int32_cast(guide, node) {
  def arg_node := guide.argument(node, 1);
  def arg_guide := guide.resolve(arg_node);
  def value := this.static_value(arg_guide, arg_node);
  // If we have a static integer value we just push it onto the stack as a
  // raw int32.
  this.assm.push(value);
}

def (this is CodeGenerator).int32_add(guide, node) {
  def left_node := guide.argument(node, 0);
  this.emit(guide.resolve(left_node), left_node);
  def right_node := guide.argument(node, 1);
  this.emit(guide.resolve(right_node), right_node);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  // Add the arguments
  this.assm.add(rEax, rEbx);
  // Push the result back onto the stack.
  this.assm.push(rEax);
}

def (this is CodeGenerator).is_intrinsic_protocol(value) -> false;
def (this is CodeGenerator).is_intrinsic_protocol(p is ProtocolAst)
 -> p.get_annotation("intrinsic") != null;
