def CompilerGrower.new_handler_table() {
  def result := new HashMap();
  result[CodeBundle.tag] := (fn (payload) -> CodeBundle.grow(payload));
  result[Parameter.tag] := (fn (payload) -> Parameter.grow(payload));
  result[TypeId.tag] := (fn (payload) -> TypeId.grow(payload));
  result[Binding.tag] := (fn (payload) -> Binding.grow(payload));
  result[Annotation.tag] := (fn (payload) -> Annotation.grow(payload));
  result[Module.tag] := (fn (payload) -> Module.grow(payload));
  result[Native.tag] := (fn (payload) -> Native.grow(payload));
  result[Universe.tag] := (fn (payload) -> Universe.grow(payload));
  result[ProtocolAst.tag] := (fn (payload) -> ProtocolAst.grow(payload));
  result[MethodAst.tag] := (fn (payload) -> MethodAst.grow(payload));
  def getter(name) -> fn (payload) -> payload[name];
  result["org::neutrino::runtime::RInteger"] := getter("value");
  result["org::neutrino::runtime::RString"] := getter("value");
  result;
}

protocol CodeBundle;

def CodeBundle.tag -> "org::neutrino::pib::CodeBundle";

def CodeBundle.grow(payload) -> new CodeBundle {
  literals := payload["literals"],
  local_count := payload["localCount"],
  filename := payload["fileName"],
  code := payload["code"],
  root_offset := payload["rootOffset"]
}

protocol Parameter;

def Parameter.tag -> "org::neutrino::pib::Parameter";

def Parameter.grow(payload) -> new Parameter {
  type := payload["type"],
  name := payload["name"],
  is_protocol := payload["isProtocolMethod"]
}

protocol MethodAst;

def MethodAst.tag -> "org::neutrino::runtime::RMethod";

def MethodAst.grow(payload) -> new MethodAst {
  annots := payload["annots"],
  params := payload["params"],
  name := payload["name"],
  code := payload["code"]
}

def (this is MethodAst).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annots) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

def (this is MethodAst).to_string() -> "#<a Method: ${this.name}>";

protocol TypeId;

def TypeId.tag -> "org::neutrino::runtime::TypeId";

def TypeId.grow(payload) -> null;

protocol ProtocolAst;

def ProtocolAst.tag -> "org::neutrino::runtime::RProtocol";

def ProtocolAst.grow(payload) -> new ProtocolAst {
  instance_type_id := payload["instanceTypeId"],
  protocol_type_id := payload["protocolTypeId"],
  id := payload["id"],
  annotations := payload["annotations"],
  display_name := payload["displayName"]
}

def (this is ProtocolAst).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annotations) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

protocol Binding;

def Binding.tag -> "org::neutrino::pib::Binding";

def Binding.grow(payload) -> new Binding {
  annotations := payload["annotations"],
  code := payload["code"]
}

def (this is Binding).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annotations) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

protocol Annotation;

def Annotation.tag -> "org::neutrino::syntax::Annotation";

def Annotation.grow(payload) -> new Annotation {
  tag := payload["tag"],
  args := payload["args"]
}

def (this is Annotation)[index] -> this.args[index];

protocol Module;

def Module.tag -> "org::neutrino::pib::Module";

def Module.grow(payload) -> new Module {
  defs := payload["defs"],
  protos := payload["protos"],
  supers := payload["rawInheritance"],
  methods := payload["methods"]
}

def (this is Module).to_string()
 -> "#<a Module: defs=${this.defs}, protos=${this.protos}, supers=${this.supers}, methods=${this.methods}>";

protocol Native;

def Native.tag -> "org::neutrino::runtime::Native";

def Native.grow(payload) -> new Native {
  name := payload["name"]
}

protocol Universe;

def Universe.tag -> "org::neutrino::pib::Universe";

def Universe.grow(payload) -> new Universe {
  modules := payload["modules"]
}

def (this is Universe).bindings -> fn for (fun) {
  for (module : this.modules.values)
    module.defs.for(fun);
}

def (this is Universe).methods -> fn for (fun) {
  for (module : this.modules.values)
    module.methods.for(fun);
}

def (this is Universe).protocols -> fn for (fun) {
  for (module : this.modules.values)
    module.protos.for(fun);
}

def (this is Universe).lookup_static_global(name) {
  with_1cc (return) {
    for (proto_name, proto : this.protocols) {
      if name = proto_name then
        return(proto);
    }
    null;
  }
}

def (this is Universe).to_string() -> "#<a Universe: ${this.modules}>";
