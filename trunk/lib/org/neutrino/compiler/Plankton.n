protocol Plankton;

def Plankton.new(data, grower) -> new Plankton {
  data := data,
  grower := grower,
  rCursor := new Ref(0),
  tag_table := Plankton.new_tag_table(),
  ref_table := new HashMap()
}

def kStringTag := 0;
def kMapTag := 1;
def kBlobTag := 2;
def kIntegerTag := 3;
def kArrayTag := 4;
def kSeedTag := 5;
def kNewReference := 6;
def kGetReference := 7;
def kBoolTag := 8;

def Plankton.new_tag_table() -> #[
  (fn (plankton) -> plankton.read_string()),
  (fn (plankton) -> plankton.read_map()),
  (fn (plankton) -> plankton.read_blob()),
  (fn (plankton) -> plankton.read_integer()),
  (fn (plankton) -> plankton.read_array()),
  (fn (plankton) -> plankton.read_seed()),
  (fn (plankton) -> plankton.read_new_reference()),
  (fn (plankton) -> plankton.read_get_reference()),
  (fn (plankton) -> plankton.read_bool())
];

def (this is Plankton).read() {
  def cursor := this.cursor;
  this.rCursor.set(cursor + 1);
  this.data[cursor];
}

def (this is Plankton).read_int16()
 -> this.read() | (this.read() << 8);

def (this is Plankton).read_int32() {
  def cursor := this.cursor;
  this.rCursor.set(cursor + 4);
  this.data.int32_at(cursor);
}

def (this is Plankton).current -> this.data[this.cursor];

def (this is Plankton).cursor -> this.rCursor.get();

def (this is Plankton).unmarshal() -> this.read_value();

def (this is Plankton).read_value() {
  def tag := this.read();
  def handler := this.tag_table[tag];
  if handler = null then
    fail("Unhandled plankton tag #${tag}");
  handler(this);
}

def (this is Plankton).read_seed() {
  def tag := this.read_value();
  def payload := this.read_value();
  this.grower.grow(tag, payload);
}

def (this is Plankton).read_new_reference() {
  def index := this.read_int16();
  def value := this.read_value();
  this.ref_table[index] := value;
  value;
}

def (this is Plankton).read_get_reference() {
  def index := this.read_int16();
  this.ref_table[index];
}

def (this is Plankton).read_string() {
  def length := this.read_int32();
  def result := new StringStream();
  for (i : 0 .. length) {
    def ord := this.read();
    result.add(string_from_ordinal(ord));
  }
  result.to_string();
}

def (this is Plankton).read_blob() {
  def length := this.read_int32();
  def out := new BlobStream();
  for (i : 0 .. length)
    out.write_int8(this.read());
  out.get_blob();
}

def (this is Plankton).read_map() {
  def length := this.read_int32();
  def result := new HashMap();
  for (i : 0 .. length) {
    def key := this.read_value();
    def value := this.read_value();
    result[key] := value;
  }
  result;
}

def (this is Plankton).read_array() {
  def length := this.read_int32();
  def result := new ArrayList();
  for (i : 0 .. length)
    result.add(this.read_value());
  result;
}

def (this is Plankton).read_integer() -> this.read_int32();

def (this is Plankton).read_bool() -> this.read() != 0;
