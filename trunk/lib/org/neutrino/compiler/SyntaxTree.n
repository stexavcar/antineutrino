protocol NodeInfo;

def NodeInfo.new() -> new NodeInfo {
  type := null,
  intrinsic := null,
  c_call := null
}

def kNoNodeInfo := new NodeInfo();

protocol SyntaxTree;

protocol NodeGuide;

def (this is NodeGuide).info(cursor) {
  def info := this.data.info[cursor];
  if info = null then kNoNodeInfo;
  else info;
}

def (this is NodeGuide).ensure_info(cursor) {
  def info := this.data.info[cursor];
  if info = null then {
    def result := new NodeInfo();
    this.data.info[cursor] := result;
    result;
  } else {
    info;
  }
}

def (this is NodeGuide).resolve(value) -> this.data.resolve(value);

// Calls
def kCall := 3;

protocol CallGuide is NodeGuide;

def (this is CallGuide).argc(cursor) -> this.data[cursor + 2];

def (this is CallGuide).name(cursor)
 -> this.data.literal_at(cursor + 1);

def (this is CallGuide).argument(cursor, index)
 -> this.data[cursor + 4 + index];

def (this is CallGuide).arguments(cursor) -> fn for (fun) {
  for (i : 0 .. this.argc(cursor)) {
    def arg_cursor := this.data[cursor + 4 + i];
    def arg_guide := this.resolve(arg_cursor);
    fun(arg_guide, arg_cursor);
  }
}

// Blocks
def kBlock := 22;

protocol BlockGuide is NodeGuide;

def (this is BlockGuide).elmc(cursor) -> this.data[cursor + 1];

def (this is BlockGuide).elements(cursor) -> fn for (fun) {
  for (i : 0 .. this.elmc(cursor)) {
    def elm_cursor := this.data[cursor + 2 + i];
    def elm_guide := this.resolve(elm_cursor);
    fun(elm_guide, elm_cursor);
  }
}

// Local definitions
def kLocalDef := 23;

protocol LocalDefGuide is NodeGuide;

def (this is LocalDefGuide).index(cursor) -> this.data[cursor + 1];

def (this is LocalDefGuide).value(cursor) -> this.data[cursor + 2];

def (this is LocalDefGuide).body(cursor) -> this.data[cursor + 3];

// Literals
def kLiteral := 7;

protocol LiteralGuide is NodeGuide;

def (this is LiteralGuide).value(cursor)
 -> this.data.literal_at(cursor + 1);
 
// Globals
def kGlobal := 10;

protocol GlobalGuide is NodeGuide;

def (this is GlobalGuide).name(cursor)
 -> this.data.literal_at(cursor + 1);

// Arguments
def kArgument := 12;

protocol ArgumentGuide is NodeGuide;

def (this is ArgumentGuide).index(cursor)
 -> this.data[cursor + 1];

// Local
def kLocal := 14;

protocol LocalGuide is NodeGuide;

def (this is LocalGuide).index(cursor)
 -> this.data[cursor + 1];
 
// New
def kNew := 17;

protocol NewGuide is NodeGuide;

def (this is NewGuide).proto(cursor)
 -> this.data.literal_at(cursor + 1);

def SyntaxTree.new(bundle) {
  def code := bundle.code;
  def literals := bundle.literals;
  def root := bundle.root_offset;
  new SyntaxTree(code, literals, root);
}

def SyntaxTree.new(code, literals, root) {
  def result := new SyntaxTree {
    code := code,
    literals := literals,
    guides := new HashMap(),
    info := new HashMap(),
    root_node := root
  }
  result.guides[kCall] := new CallGuide { data := result };
  result.guides[kLiteral] := new LiteralGuide { data := result };
  result.guides[kGlobal] := new GlobalGuide { data := result };
  result.guides[kArgument] := new ArgumentGuide { data := result };
  result.guides[kBlock] := new BlockGuide { data := result };
  result.guides[kLocalDef] := new LocalDefGuide { data := result };
  result.guides[kLocal] := new LocalGuide { data := result };
  result.guides[kNew] := new NewGuide { data := result };
  result;
}

def (this is SyntaxTree).root_guide -> this.resolve(this.root_node);

def (this is SyntaxTree).resolve(index) {
  def opcode := this[index];
  def guide := this.guides[opcode];
  if guide = null then
    print("Unknown opcode #${opcode}.");
  guide;
}

def (this is SyntaxTree)[index] -> this.code[index];

def (this is SyntaxTree).literal_at(index)
  -> this.literals[this[index]];
