protocol NodeInfo;

def NodeInfo.new() -> new NodeInfo {
  rType := new Ref(null),
  rIntrinsic := new Ref(null),
  rCCall := new Ref(null)
}

def (this is NodeInfo).type -> this.rType.get();

def (this is NodeInfo).type:=(r) -> this.rType.set(r);

def (this is NodeInfo).intrinsic -> this.rIntrinsic.get();

def (this is NodeInfo).intrinsic:=(v) -> this.rIntrinsic.set(v);

def (this is NodeInfo).c_call -> this.rCCall.get();

def (this is NodeInfo).c_call:=(v) -> this.rCCall.set(v);

def kNoNodeInfo := new NodeInfo();

protocol SyntaxGuide;

def kCall := 3;
def kLiteral := 7;
def kGlobal := 10;
def kArgument := 12;
def kBlock := 22;

protocol NodeGuide;

def (this is NodeGuide).info(cursor) {
  def info := this.data.info[cursor];
  if info = null then kNoNodeInfo;
  else info;
}

def (this is NodeGuide).ensure_info(cursor) {
  def info := this.data.info[cursor];
  if info = null then {
    def result := new NodeInfo();
    this.data.info[cursor] := result;
    result;
  } else {
    info;
  }
}

def (this is NodeGuide).resolve(value) -> this.data.resolve(value);

protocol CallGuide is NodeGuide;

def (this is CallGuide).argc(cursor) -> this.data[cursor + 2];

def (this is CallGuide).name(cursor)
 -> this.data.literal_at(cursor + 1);

def (this is CallGuide).argument(cursor, index)
 -> this.data[cursor + 3 + index];

def (this is CallGuide).arguments(cursor) -> fn for (fun) {
  for (i : 0 .. this.argc(cursor)) {
    def arg_cursor := this.data[cursor + 3 + i];
    def arg_guide := this.resolve(arg_cursor);
    fun(arg_guide, arg_cursor);
  }
}

protocol BlockGuide is NodeGuide;

def (this is BlockGuide).elmc(cursor) -> this.data[cursor + 1];

def (this is CallGuide).element(cursor, index)
 -> this.data[cursor + 2 + index];

def (this is BlockGuide).elements(cursor) -> fn for (fun) {
  for (i : 0 .. this.elmc(cursor)) {
    def elm_cursor := this.data[cursor + 2 + i];
    def elm_guide := this.resolve(elm_cursor);
    fun(elm_guide, elm_cursor);
  }
}
 
protocol LiteralGuide is NodeGuide;

def (this is LiteralGuide).value(cursor)
 -> this.data.literal_at(cursor + 1);
 
protocol GlobalGuide is NodeGuide;

def (this is GlobalGuide).name(cursor)
 -> this.data.literal_at(cursor + 1);

protocol ArgumentGuide is NodeGuide;

def (this is ArgumentGuide).index(cursor)
 -> this.data[cursor + 1];

def SyntaxGuide.new(code, literals) {
  def result := new SyntaxGuide {
    code := code,
    literals := literals,
    guides := new HashMap(),
    info := new HashMap()
  }
  result.guides[kCall] := new CallGuide { data := result };
  result.guides[kLiteral] := new LiteralGuide { data := result };
  result.guides[kGlobal] := new GlobalGuide { data := result };
  result.guides[kArgument] := new ArgumentGuide { data := result };
  result.guides[kBlock] := new BlockGuide { data := result };
  result;
}

def (this is SyntaxGuide).resolve(index) {
  def opcode := this[index];
  def guide := this.guides[opcode];
  if guide = null then
    print("Unknown opcode #${opcode}.");
  guide;
}

def (this is SyntaxGuide)[index] -> this.code[index];

def (this is SyntaxGuide).literal_at(index)
  -> this.literals[this[index]];
