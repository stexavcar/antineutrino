/**
 * The binary's symbol table.  Contains two list of entries, the internal and
 * the internal symbols.  Each symbol is stored in a SymbolTableEntry object.
 *
 * See symtab_command in FFR.
 */
protocol SymbolTable {

  @static def proto.new(strtab) => new SymbolTable {
    strtab := strtab,
    locals := new ArrayList(),
    externs := new ArrayList(),
    local_map := new HashMap(),
    macho := null
  }

  /**
   * Adds a local symbol with the specified name that points to the given
   * range in the text segment.
   */
  def this.add_text_segment_symbol(name, offset, size)
   => this.add_local_entry(name, offset, size, this.macho.text);
 
  /**
   * Adds a local symbol with the specified name that points to the given
   * range in the data segment.
   */
  def this.add_data_segment_symbol(name, offset, size)
   => this.add_local_entry(name, offset, size, this.macho.data);
 
  /**
   * Adds a local symbol.  Since we don't know what the offset of the
   * section will be we store a reference to the section and resolve the
   * offset after the binary has been laid out.
   */
  def this.add_local_entry(name, offset, size, section) {
    def name_index := this.strtab.ensure(name);
    def symbol := new LocalSymbolTableEntry(name_index, offset, section);
    this.local_map[name] := symbol;
    this.locals.add(symbol);
  }

  def this.address_of(name)
   => this.local_map[name].address(this.macho);

  /**
   * Adds an external reference with the given name.
   */
  def this.add_extern_symbol(name) {
    def name_index := this.strtab.ensure(name);
    this.externs.add(new ExternSymbolTableEntry(name_index));
  }

  def this.local_count => this.locals.length;

  def this.external_count => this.externs.length;

  def this.name => "#SYMBOLS";

  def this.align => WORD_ALIGN;

  def this.length => this.symbols.length;

  def this.symbols => this.locals + this.externs;

  def this.encode(out, macho) {
    for (symbol in this.externs + this.locals)
      symbol.encode(out, macho);
  }

  def this.size => this.length * SymbolTableEntry.size;

}

/**
 * A single entry in the nlist associated with a symbol table.
 */
protocol SymbolTableEntry {

  def this.desc => 16r0000;

  def this.encode(out, macho) {
    out.write_int32(this.name_index);
    out.write_int8(this.type);
    out.write_int8(this.sect(macho));
    out.write_int16(this.desc);
    out.write_int32(this.value(macho));
  }

  @static def proto.size => 3 * WORD_SIZE;

}

/**
 * An nlist entry for a symbol whose definition is within this binary.
 */
protocol LocalSymbolTableEntry is SymbolTableEntry {

  @static def proto.new(name_index, start, section) => new LocalSymbolTableEntry {
    name_index := name_index,
    start := start,
    section := section
  }

  def this.type => 16r0F; // N_TYPE | N_EXT

  def this.sect(macho)
   => macho.index_of(this.section);

  def this.value(macho)
   => this.address(macho);

  def this.address(macho)
   => macho.offset_of(this.section) + this.start;

}

/**
 * An nlist entry for a symbol whose definition is external to this binary.
 */
protocol ExternSymbolTableEntry is SymbolTableEntry {

  @static def proto.new(name_index) => new ExternSymbolTableEntry {
    name_index := name_index
  }

  def this.type => 16r01; // N_EXT

  def this.sect(macho) => 0;

  def this.value(macho) => 0;

}
