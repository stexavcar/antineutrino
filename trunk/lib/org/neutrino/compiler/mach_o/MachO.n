def PAGE_SIZE := 16r1000;
def WORD_ALIGN := 2;
def WORD_SIZE := 1 << WORD_ALIGN;
def SEGMENT_COMMAND_SIZE := 56;
def SECTION_HEADER_SIZE := 68;

// A mach-o file, or at least the parts of it that are relevant for
// generating object files for neutrino programs.
protocol MachO is ObjectFormat {

  @static def proto.commands_start_marker => "COMMANDS{";

  @static def proto.commands_end_marker => "COMMANDS}";

  @static def proto.segments_start_marker => "SEGMENTS{";

  @static def proto.segments_end_marker => "SEGMENTS}";
  
  @static def proto.header_name => "mach_header";

  @static def proto.header_size => 7 * WORD_SIZE;

  @static def proto.sizeof_segment_command => SEGMENT_COMMAND_SIZE;

  @static def proto.segment_command_name => "LC_SEGMENT";

  @static def proto.section_header_size => 17 * WORD_SIZE;

  @static def proto.symtab_command_name => "LC_SYMTAB";

  @static def proto.sizeof_symtab_command => 6 * WORD_SIZE;

  @static def proto.dysymtab_command_name => "LC_DYSYMTAB";

  @static def proto.sizeof_dysymtab_command => 20 * WORD_SIZE;

  @static def proto.new(binary) {
    def reloc_table := new RelocationTable();
    def strtab := new StringTable();
    def symtab := new SymbolTable(strtab);
    def text := new TextSection(reloc_table, symtab);
    def cstrings := new CStringSection();
    def indirect_symbols := new IndirectSymbols();
    def jump_table := new JumpTable();
    def data := new DataSection(reloc_table);
    def result := new MachO {
      binary := binary,
      text := text,
      cstrings := cstrings,
      strtab := strtab,
      symtab := symtab,
      indirect_symbols := indirect_symbols,
      jump_table := jump_table,
      reloc_table := reloc_table,
      data := data,
      sections := new ArrayList() [ text, data, jump_table, cstrings ],
      dark_sections := new ArrayList() [ strtab, symtab, indirect_symbols, reloc_table ],
      layout := new Layouter(),
      local_calls := new ArrayList(),
      dylib_calls := new ArrayList(),
      dysym_indices := new HashMap()
    }
    symtab.macho := result;
    result;
  }

  /*
   * struct mach_header {
   *   uint32_t magic;
   *   cpu_type_t cputype;
   *   cpu_subtype_t cpusubtype;
   *   uint32_t filetype;
   *   uint32_t ncmds;
   *   uint32_t sizeofcmds;
   *   uint32_t flags;
   * }
   */
  def this.encode_mach_header(out) {
    def info := this.layout.info(MachO.header_name);
    assert_equal(info.start, out.length);
    out.write_int32(16rFEEDFACE);
    out.write_int32(7); // CPU_TYPE_X86
    out.write_int32(3); // cpusubtype
    out.write_int32(1); // MH_OBJECT
    out.write_int32(this.ncmds);
    def start_info := this.layout.info(MachO.commands_start_marker);
    def end_info := this.layout.info(MachO.commands_end_marker);
    def sizeofcmds := end_info.end - start_info.start;
    out.write_int32(sizeofcmds);
    out.write_int32(5);
    assert_equal(info.end, out.length);  
  }

  def this.encode(out) {
    this.encode_mach_header(out);
    this.encode_load_commands(out);
    this.encode_sections(out);
  }

  def this.encode_load_commands(out) {
    this.encode_segment_command(out);
    this.encode_section_headers(out);
    this.encode_symtab_command(out);
    this.encode_dysymtab_command(out);
  }

  def this.calculate_layout() {
    def layout := this.layout;
    // Add the mach header
    layout.add_section(MachO.header_name, null, MachO.header_size,
        WORD_SIZE);
    // Add segment load command with section headers
    layout.next_section(MachO.commands_start_marker, 0, 1);
    layout.next_section(MachO.segment_command_name,
        MachO.sizeof_segment_command, WORD_SIZE);
    for (section in this.sections) {
      layout.next_section(section.header_name,
          MachO.section_header_size, WORD_SIZE);
    }
    // Add remaining load commands
    layout.next_section(MachO.symtab_command_name,
        MachO.sizeof_symtab_command, WORD_SIZE);
    layout.next_section(MachO.dysymtab_command_name,
        MachO.sizeof_dysymtab_command, WORD_SIZE);
    layout.next_section(MachO.commands_end_marker, 0, 1);
    // Add sections
    layout.next_section(MachO.segments_start_marker, 0, 1);
    for (section in this.all_sections) {
      def name := section.name;
      def alignment := 1 << section.align;
      layout.next_section(section.name, section.size, alignment);
    }
    // Make sure the layout is padded to word size, independent of the
    // alignment of the last section.
    layout.next_section(MachO.segments_end_marker, 0, WORD_SIZE);
    layout.calculate();
  }

  def this.add_data_block(name, code) {
    def offset := this.data.add_code(code);
    this.symtab.add_local_data_entry(name, offset, code.length);
  }
  
  def this.nsects => this.sections.length;

  def this.ncmds => 3;

  def this.sizeof_segment_command => SEGMENT_COMMAND_SIZE + (this.nsects * SECTION_HEADER_SIZE);

  def this.encode_symtab_command(out) {
    def info := this.layout.info(MachO.symtab_command_name);
    assert_equal(info.start, out.length);
    out.write_int32(16r2); // LC_SYMTAB
    out.write_int32(info.size);
    def symbols_info := this.layout.info(this.symtab.name);
    out.write_int32(this.offset_of(this.symtab));
    out.write_int32(this.symtab.length);
    out.write_int32(this.offset_of(this.strtab));
    out.write_int32(this.strtab.size);
    assert_equal(info.end, out.length);
  }

  def this.encode_dysymtab_command(out) {
    def info := this.layout.info(MachO.dysymtab_command_name);
    assert_equal(info.start, out.length);
    out.write_int32(16rB); // LC_DYSYMTAB
    out.write_int32(MachO.sizeof_dysymtab_command);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(this.symtab.external_count);
    out.write_int32(this.symtab.local_count);
    out.write_int32(0);
    out.write_int32(this.symtab.external_count);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(this.offset_of(this.indirect_symbols));
    out.write_int32(this.symtab.external_count);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    out.write_int32(0);
    assert_equal(info.end, out.length);
  }

  /*
   * struct segment_command {
   *   uint32_t cmd;
   *   uint32_t cmdsize;
   *   char segname[16];
   *   uint32_t vmaddr;
   *   uint32_t vmsize;
   *   uint32_t fileoff;
   *   uint32_t filesize;
   *   vm_prot_t maxprot;
   *   vm_prot_t initprot;
   *   uint32_t nsects;
   *   uint32_t flags;
   * }
   */
  def this.encode_segment_command(out) {
    def layout := this.layout;
    def info := layout.info(MachO.segment_command_name);
    assert_equal(info.start, out.length);
    out.write_int32(16r01); // LC_SEGMENT
    out.write_int32(this.sizeof_segment_command);
    out.write_c_string("", 16);
    def segments_start_info := layout.info(MachO.segments_start_marker);
    def segments_end_info := layout.info(MachO.segments_end_marker);
    def size := segments_end_info.end - segments_start_info.start;
    out.write_int32(0);
    out.write_int32(size);
    out.write_int32(segments_start_info.start);
    out.write_int32(size);
    out.write_int32(7);
    out.write_int32(5);
    out.write_int32(this.nsects);
    out.write_int32(0); // flags
    assert_equal(info.end, out.length);
  }

  /*
   * struct section {
   *   char sectname[16];
   *   char segname[16];
   *   uint32_t addr;
   *   uint32_t size;
   *   uint32_t offset;
   *   uint32_t align;
   *   uint32_t reloff;
   *   uint32_t nreloc;
   *   uint32_t flags;
   *   uint32_t reserved1;
   *   uint32_t reserved2;
   * }
   */
  def this.encode_section_headers(out) {
    for (section in this.sections) {
      def header_info := this.layout.info(section.header_name);
      def section_info := this.layout.info(section.name);
      assert_equal(header_info.start, out.length);
      out.write_c_string(section.sectname, 16);
      out.write_c_string(section.segname, 16);
      out.write_int32(section_info.start);
      out.write_int32(section_info.size);
      out.write_int32(section_info.start);
      out.write_int32(section.align);
      if section.nreloc = 0 then
        out.write_int32(0);
      else
        out.write_int32(this.offset_of(this.reloc_table));
      out.write_int32(section.nreloc);
      out.write_int32(section.flags);
      out.write_int32(0);
      out.write_int32(section.reserved2);
      assert_equal(header_info.end, out.length);
    }
  }

  def this.all_sections => this.sections + this.dark_sections;

  def this.encode_sections(out) {
    for (section in this.all_sections) {
      def info := this.layout.info(section.name);
      assert_true(out.length <= info.start);
      out.pad_to(info.start);
      section.encode(out, this);
      assert_true(out.length <= info.end);
      out.pad_to(info.end);
    }
  }

  def this.index_of(target) {
    ref offset := 1;
    with_escape (yield) {
      for (section in this.all_sections) {
        if section = target
          then yield(offset);
        offset := offset + 1;
      }
      null;
    }
  }

  def this.offset_of(target)
   => this.layout.info(target.name).start;

  def this.preprocess_relocation(relocation)
   => this.preprocess_symbol(relocation, relocation.target);

  def this.preprocess_symbol(relocation, symbol is DylibSymbol) {
    def name := symbol.name;
    def index := this.dysym_indices[name];
    if index = null then {
      def new_index := this.dysym_indices.size;
      this.dysym_indices[name] := new_index;
      this.jump_table.add_extern();
      this.indirect_symbols.add();
      this.symtab.add_extern(name);
    }
    def entry := new CallRelocationInfo(this.text, relocation);
    this.reloc_table.add_entry(entry);
  }

  def this.preprocess_symbol(relocation, symbol is StringSymbol) {
    this.reloc_table.add_entry(new CallRelocationInfo(this.text, relocation));
    this.cstrings.ensure(symbol.value);
  }

  def this.preprocess_symbol(relocation, symbol is LocalSymbol) {
    if not relocation.is_relative then {
      def section := this.symtab.local_map[symbol.name].section;
      this.reloc_table.add_entry(new CallRelocationInfo(section, relocation));
    }
  }

  def this.symbol_address(target is DylibSymbol) {
    def jump_table_address := this.offset_of(this.jump_table);
    def index := this.dysym_indices[target.name];
    jump_table_address + (5 * index);  
  }

  def this.symbol_address(target is LocalSymbol)
   => this.symtab.address_of(target.name);

  def this.symbol_address(target is StringSymbol)
   => this.offset_of(this.cstrings) + this.cstrings[target.value];

  def this.process_relocation(relocation) {
    def target_addr := this.symbol_address(relocation.target);
    def source_addr := this.symtab.address_of(relocation.assm.name);
    def instr_addr := source_addr + relocation.offset;
    def instr_offset := instr_addr - this.offset_of(this.text);
    if relocation.is_relative then {
      this.text.rewrite_int32(instr_offset, target_addr - (instr_addr + WORD_SIZE));
    } else {
      this.text.rewrite_int32(instr_offset, target_addr);
    }
  }

}

protocol ObjectSection {

  def this.header_name => "${this.name}.header";

  def this.name => "${this.segname}.${this.sectname}";

  def this.finalize(macho);

}
