protocol TypeAnalysis;

def TypeAnalysis.new(universe) -> new TypeAnalysis {
  universe := universe,
  r_scope_chain := new Ref(null)
}

protocol ScopeChainLink;

def (this is TypeAnalysis).scope_chain -> this.r_scope_chain.get();

def (this is TypeAnalysis).scope_chain:=(v) -> this.r_scope_chain.set(v);

def (this is TypeAnalysis).push_local_scope(guide, node) {
  def prev := this.scope_chain;
  def next := new ScopeChainLink {
    guide := guide,
    node := node,
    prev := prev
  }
  this.scope_chain := next;
}

def (this is TypeAnalysis).pop_local_scope() {
  this.scope_chain := this.scope_chain.prev;
}

def (this is TypeAnalysis).local_type(index) {
  ref current := this.scope_chain;
  with_1cc (yield) -> Control.repeat(fn () {
    if current = null
      then yield(null);
    if current.guide.index(current.node) = index then {
      def value := current.guide.value(current.node);
      yield(current.guide.info(value).type);
    } else {
      current := current.prev;
    }
  });
}

def (this is TypeAnalysis).analyze(guide, node) {
  def type := this.do_analyze(guide, node);
  if type != null then
    guide.ensure_info(node).type := type;
  type;
}

def (this is TypeAnalysis).do_analyze(guide is CallGuide, node) {
  def types := new ArrayList();
  for (arg_guide, arg_node : guide.arguments(node)) {
    def type := this.analyze(arg_guide, arg_node);
    types.add(type);
  }
  def name := guide.name(node);
  def method := with_1cc (yield) {
    for (method : this.universe.methods) {
      if method.name = name then {
        def params := method.params;
        if params.length = types.length then {
          with_1cc (break) {
            for (i : 0 .. params.length) {
              def param := params[i];
              def type := if param.is_protocol
                then "${param.type}.protocol"
                else param.type;
              if type != types[i]
                then break(null);
            }
            yield(method);
          }
        }
      }
    }
    null;
  }
  if method != null then {
    if method.get_annotation("inline") != null then {
      def intrinsic := method.get_annotation("intrinsic");
      guide.ensure_info(node).intrinsic := intrinsic[0];
    }
    def c_call_annot := method.get_annotation("c_call");
    if c_call_annot != null then {
      def emit := method.get_annotation("emit");
      guide.ensure_info(node).c_call := emit[0];
    }
    def annot := method.get_annotation("type");
    if annot != null
      then annot[0];
  }
}

def (this is TypeAnalysis).do_analyze(guide is LiteralGuide, node)
 -> this.value_type(guide.value(node));

def (this is TypeAnalysis).do_analyze(guide is GlobalGuide, node) {
  def name := guide.name(node);
  def value := this.universe.lookup_static_global(name);
  if value = null
    then null;
    else this.value_type(value);
}

def (this is TypeAnalysis).do_analyze(guide is LocalGuide, node)
 -> this.local_type(guide.index(node));

def (this is TypeAnalysis).do_analyze(guide is BlockGuide, node) {
  ref last := null;
  for (elm_guide, elm_node : guide.elements(node))
    last := this.analyze(elm_guide, elm_node);
  last;
}

def (this is TypeAnalysis).do_analyze(guide is LocalDefGuide, node) {
  def value := guide.value(node);
  this.analyze(guide.resolve(value), value);
  this.push_local_scope(guide, node);
  def body := guide.body(node);
  def result := this.analyze(guide.resolve(body), body);
  this.pop_local_scope();
  result;
}

def (this is TypeAnalysis).do_analyze(guide is ArgumentGuide, node) {
  
}

def (this is TypeAnalysis).value_type(obj is Integer) -> "Integer";

def (this is TypeAnalysis).value_type(obj is ProtocolAst)
 -> "${obj.id}.protocol";

def (this is TypeAnalysis).value_type(obj) -> null;
