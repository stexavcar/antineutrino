def Register.new(index, name) -> new Register {
  index := index,
  name := name
}

def (this is Register).to_string() -> "%${this.name}";

def Memory.new(base is Register, disp is Integer) -> new Memory {
  base := base,
  disp := disp
}

def rEax := new Register(0, "eax");
def rEcx := new Register(1, "ecx");
def rEdx := new Register(2, "edx");
def rEbx := new Register(3, "ebx");
def rEsp := new Register(4, "esp");
def rEbp := new Register(5, "ebp");
def rEsi := new Register(6, "esi");
def rEdi := new Register(7, "edi");

def (this is Register)=(that is Register) -> this.index = that.index;

protocol AssemblerIa386;

def AssemblerIa386.new(binary, name) -> new AssemblerIa386 {
  binary := binary,
  name := name,
  out := new BlobStream(),
  fixups := new ArrayList()
}

def (this is AssemblerIa386).finalize() {
  for (fixup : this.fixups)
    fixup();
}

def kMemory := 2r00;
def kMemoryDisp8 := 2r01;
def kRegister := 2r11;

def kScaleOne := 2r00;
def kScaleTwo := 2r01;
def kScaleFour := 2r10;
def kScaleEight := 2r11;

def (this is AssemblerIa386).cursor -> this.out.length;

def (this is AssemblerIa386).write_mod_rm(mod, reg, rm) {
  this.out.write_int8((mod << 6) | (reg << 3) | rm);
}

def (this is AssemblerIa386).write_sib(scale, index, base) {
  this.out.write_int8((scale << 6) | (index << 3) | base);
}

def (this is AssemblerIa386).write_disp8(disp) {
  this.out.write_int8(disp);
}

def (this is AssemblerIa386).write_imm32(val) {
  this.out.write_int32(val);
}

def (this is AssemblerIa386).rewrite_imm32(offset, val) {
  this.out.rewrite_int32(offset, val);
}

def (this is AssemblerIa386).write_opcode(val) {
  this.out.write_int8(val);
}

// B8 +rd -> MOV r32, imm32
def (this is AssemblerIa386).mov(imm32 is Integer, dest is Register) {
  this.write_opcode(16rB8 + dest.index);
  this.write_imm32(imm32);
}

def (this is AssemblerIa386).write_operands(reg0 is Register, reg1 is Register) {
  this.write_mod_rm(kRegister, reg1.index, reg0.index);
}

def (this is AssemblerIa386).write_operands(mem is Memory, reg is Register) {
  this.write_operand(reg.index, mem);
}

def (this is AssemblerIa386).write_operand(code is Integer, dest is Register) {
  this.write_mod_rm(kRegister, code, dest.index);
}

def (this is AssemblerIa386).write_operand(code is Integer, mem is Memory) {
  if mem.disp = 0 then {
    if mem.base = rEbp then {
      // Access to memory through EBP cannot be done through a simple mod/rm,
      // instead it uses an access with a disp8 where the disp8 is 0.
      this.write_mod_rm(kMemoryDisp8, code, rEbp.index);
      this.write_disp8(0);
    } else {
      this.write_mod_rm(kMemory, code, mem.base.index);
      // Access to memory through ESP cannot be done through a simple mod/rm,
      // instead it uses an SIB.
      if mem.base = rEsp
        then this.write_sib(kScaleOne, rEsp.index, mem.base.index);
    }
  } else {
	this.write_mod_rm(kMemoryDisp8, code, mem.base.index);
	// See above for the special handling of ESP.
    if mem.base = rEsp
      then this.write_sib(kScaleOne, rEsp.index, mem.base.index);
    this.write_disp8(mem.disp);
  }
}

// C7 /0 -> MOV r/m32, imm32
def (this is AssemblerIa386).mov(dest is Operand, imm32 is Integer) {
  this.write_opcode(16rC7);
  this.write_operand(0, dest);
  this.write_imm32(imm32);
}

// 89 /r -> MOV r/m32, r32
def (this is AssemblerIa386).mov(dest is Operand, src is Register) {
  this.write_opcode(16r89);
  this.write_operands(dest, src);
}

// 8B /r -> MOV r32, r/m32
def (this is AssemblerIa386).mov(dest is Register, src is Operand) {
  this.write_opcode(16r8B);
  this.write_operands(src, dest);
}

// 01 /r -> ADD r/m32, r32
def (this is AssemblerIa386).add(dest is Register, src is Operand) {
  this.write_opcode(16r03);
  this.write_operands(src, dest);
}

// 03 /r -> ADD r32, r/m32
def (this is AssemblerIa386).add(dest is Operand, src is Register) {
  this.write_opcode(16r01);
  this.write_operands(dest, src);
}

// 81 /0 id -> ADD r/m32, imm32
def (this is AssemblerIa386).add(dest is Operand, imm32 is Integer) {
  this.write_opcode(16r81);
  this.write_operand(0, dest);
  this.write_imm32(imm32);
}

// 2B /r -> SUB r32, r/m32
def (this is AssemblerIa386).sub(dest is Register, src is Operand) {
  this.write_opcode(16r2B);
  this.write_operands(src, dest);
}

// 29 /r -> SUB r/m32, r32
def (this is AssemblerIa386).sub(dest is Operand, src is Register) {
  this.write_opcode(16r29);
  this.write_operands(dest, src);
}

// 81 /5 id -> SUB r/m32, imm32
def (this is AssemblerIa386).sub(dest is Operand, imm32 is Integer) {
  this.write_opcode(16r81);
  this.write_operand(5, dest);
  this.write_imm32(imm32);
}

// 21 /r -> AND r/m32, r32
def (this is AssemblerIa386).ahnd(dest is Operand, src is Register) {
  this.write_opcode(16r21);
  this.write_operands(dest, src);
}

// 23 /r AND r32, r/m32
def (this is AssemblerIa386).ahnd(dest is Register, src is Operand) {
  this.write_opcode(16r23);
  this.write_operands(src, dest);
}

// 81 /4 id -> AND r/m32, imm32 
def (this is AssemblerIa386).ahnd(dest is Operand, imm32 is Integer) {
  this.write_opcode(16r81);
  this.write_operand(4, dest);
  this.write_imm32(imm32);
}

// 50 +rd -> PUSH r32
def (this is AssemblerIa386).push(reg is Register) {
  this.write_opcode(16r50 + reg.index);
}

// FF /6 -> PUSH r/m32
def (this is AssemblerIa386).push(mem is Operand) {
  this.write_opcode(16rFF);
  this.write_operand(6, mem);
}

// 68 -> PUSH imm32
def (this is AssemblerIa386).push(imm32 is Integer) {
  this.write_opcode(16r68);
  this.write_imm32(imm32);
}

// 58 +rd -> POP r32
def (this is AssemblerIa386).pop(reg is Register) {
  this.write_opcode(16r58 + reg.index);
}

// 8F /0 -> POP r/m32
def (this is AssemblerIa386).pop(mem is Operand) {
  this.write_opcode(16r8F);
  this.write_operand(0, mem);
}

// C3 -> RET
def (this is AssemblerIa386).ret() {
  this.write_opcode(16rC3);
}

// C9 -> LEAVE
def (this is AssemblerIa386).leave() {
  this.write_opcode(16rC9);
}

// CC -> INT 3
def (this is AssemblerIa386).int3() {
  this.write_opcode(16rCC);
}

def (this is AssemblerIa386).enter_frame() {
  // Push the previous frame's base pointer to save it for later.
  // It will be restored by .leave.
  this.push(rEbp);
  // Make the current stack pointer the new base pointer.
  this.mov(rEbp, rEsp);
  this.sub(rEsp, 16r18);
}

def (this is AssemblerIa386).exit_frame() {
  this.leave();
  this.ret();
}

def (this is AssemblerIa386).call(target is LocalCallTarget) {
  this.write_opcode(16rE8);
  def reloff := this.cursor;
  this.write_imm32(0);
  this.binary.add_marker(new LocalCallMarker(this, reloff, target.name));
}

def (this is AssemblerIa386).call(target is ExternalCallTarget) {
  this.write_opcode(16rE8);
  def reloff := this.cursor;
  this.write_imm32(0);
  def index := this.binary.register_extern(target.name, this.name, reloff);
  this.fixups.add(fn {
    def ownoff := this.binary.code_block_offset(this.name);
    def codeoff := this.binary.extern_offset(index);
    this.rewrite_imm32(reloff, codeoff - (ownoff + reloff + 4));
  });  
}

def (this is AssemblerIa386).length -> this.out.length;

def (this is AssemblerIa386).code -> this.out.get_blob();

protocol Ia386;

def Ia386.new() -> new Ia386 { };

def (this is Ia386).new_assembler(binary, name)
 -> new AssemblerIa386(binary, name);
