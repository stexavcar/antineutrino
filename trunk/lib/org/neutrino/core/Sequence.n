/*
 * Provides ordered sequence behaviour.
 *
 * Objects implementing this protocol must implement:
 * - iter: produces an object which iterates over elements in the sequence
 * Iterator objects must provide:
 * - has_next: true if another item is available
 * - next: returns the next item and advances the iteration
 */

protocol Iter;
def (this is Iter).has_next;
def (this is Iter).next;

protocol Sequence;

def (this is Sequence).for(f) {
  def itr := this.iter;
  with_1cc leave -> Control.repeat(fn () {
    if not itr.has_next() then
      leave(this);
    f(itr.next);
  });
}

def (this is Sequence).is_empty -> not this.iter.has_next;
