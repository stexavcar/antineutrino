/*
 * Signed integers 
 */
@native("int") protocol Integer;

def (this is Integer)+(that is Integer) -> internal "int+int";

def (this is Integer)-(that is Integer) -> internal "int-int";

def (this is Integer)*(that is Integer) -> internal "int*int";

def (this is Integer)%(that is Integer) -> internal "int%int";

def (this is Integer)/(that is Integer) -> internal "int/int";

def (this is Integer)<(that is Integer) -> internal "int<int";

def (this is Integer)>=(that is Integer) -> not (this < that);

def (this is Integer)<=(that is Integer) -> not (that < this);

def (this is Integer)>(that is Integer) -> not (this < that or this = that);

def (this is Integer)=(that is Integer) -> internal "int=int";

def (this is Integer)|(that is Integer) -> internal "int|int";

def (this is Integer)&(that is Integer) -> internal "int&int";

def (this is Integer)<<(that is Integer) -> internal "int<<int";

def (this is Integer)>>(that is Integer) -> internal "int>>int";

def (this is Integer)..(that) -> new Interval {
  from := this,
  to := that,
  dir := if this < that then 1 else 0-1
};

protocol Interval is Sequence;

def (this is Interval)=(other is Interval) -> this.from = other.from and this.to = other.to;

def (this is Interval).iter {
  ref i := this.from;
  new Iter {
    has_next -> not i = this.to,
    next -> { def ret := i; i:= i + this.dir; ret }
  };
}

def (this is Interval).for(fun) -> this.for(fun, this.from);

def (this is Interval).for(fun, i)
 -> if i = this.to then this else { fun(i); this.for(fun, i + this.dir); };
