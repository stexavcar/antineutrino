protocol PrimitiveCollection {
  
}

@native("array") protocol PrimitiveArray is Sequence, PrimitiveCollection {

  @static def proto.new(size is Integer) => internal "mutprimarr";

  def this[index is Integer] => internal "array[]";

  def this[i is Integer]:=(value) => internal "mutarr.set";

  def this.length => internal "array.length";

  def this+(that is PrimitiveArray) {
    def result := new PrimitiveArray(this.length + that.length);
    for (i in 0 .. this.length)
      result[i] := this[i];
    for (i in 0 .. that.length)
      result[this.length + i] := that[i];
    result;
  }

  def this=(that is PrimitiveArray)
   => (this.length = that.length) and (with_escape (yield) {
     for (i in 0 .. this.length) {
       if this[i] != that[i]
         then yield(false);
     }
     true;
   });

  def this.for(fun) {
    for (i in 0 .. this.length)
      fun(this[i]);
  }

  def this[slice is Interval] {
    def a := new PrimitiveArray(Math.abs(slice.to - slice.from));
    ref i := 0;
    for (idx in slice) {
      a[i] := this[idx];
      i := i + 1;
    }
    a;
  }

}

@native("byte_array") protocol PrimitiveByteArray is PrimitiveArray {

  def this[index is Integer] => internal "byte_array[1]";

  def this.int32_at(index is Integer) => internal "byte_array[4]";

  def this.length => internal "byte_array.length";

  @static def proto.new(size is Integer) => internal "mutprimbytarr";

  def this[i is Integer]:=(value is Integer) => internal "mutbytarr.set";

}
