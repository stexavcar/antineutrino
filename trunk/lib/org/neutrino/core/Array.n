@native("array") protocol PrimitiveArray is Sequence;

def (this is PrimitiveArray)[index is Integer] -> internal "array[]";

def (this is PrimitiveArray).length -> internal "array.length";

def (this is PrimitiveArray)+(that is PrimitiveArray) {
  def result := new MutablePrimitiveArray(this.length + that.length);
  for (def i : 0 .. this.length)
    result[i] := this[i];
  for (def i : 0 .. that.length)
    result[this.length + i] := that[i];
  result;
}

def (this is PrimitiveArray).iter {
  def self := this;
  def index_itr := (0 .. this.length).iter;
  new Iter {
    has_next -> index_itr.has_next,
    next -> self[index_itr.next]
  };
}

def (this is PrimitiveArray)[slice is Interval] {
  def a := new MutablePrimitiveArray(Math.abs(slice.to - slice.from));
  ref i := 0;
  for (def idx : slice) {
    a[i] := this[idx];
    i := i + 1;
  }
  a;
}

@native("mutarr") protocol MutablePrimitiveArray is PrimitiveArray;

def MutablePrimitiveArray.new(size is Integer) -> internal "mutprimarr";

def (this is MutablePrimitiveArray)[i is Integer]:=(value) -> internal "mutarr.set";

@native("byte_array") protocol ByteArray;

def (this is ByteArray)[index is Integer] -> internal "byte_array[]";

def (this is ByteArray).length -> internal "byte_array.length";

@native("mutbytarr") protocol MutablePrimitiveByteArray is ByteArray;

def MutablePrimitiveByteArray.new(size is Integer) -> internal "mutprimbytarr";

def (this is MutablePrimitiveByteArray)[i is Integer]:=(value is Integer) -> internal "mutbytarr.set";

