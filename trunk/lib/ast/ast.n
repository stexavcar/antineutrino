internal def compile_expression();
internal def lift(x);

class SyntaxTree { }

class Expression {
  def evaluate() -> (thisÂ·compile_expression())();
}

internal class ClassExpression : Expression {
  internal def evaluate();
}

internal class LambdaExpression : Expression {
  internal def parameters();
  internal def body();
}

internal class ThisExpression : Expression { }
internal class LocalDefinition : Expression { }
internal class LiteralExpression : Expression { }
internal class InvokeExpression : Expression { }
internal class ReturnExpression : Expression { }
internal class CallExpression : Expression { }
internal class MethodExpression : Expression { }
internal class SequenceExpression : Expression { }
internal class TupleExpression : Expression { }
internal class GlobalExpression : Expression { }
internal class Symbol : Expression { }
internal class ConditionalExpression : Expression { }
internal class QuoteExpression : Expression { }
internal class BuiltinCall : Expression { }
internal class InterpolateExpression : Expression { }
internal class LocalDefinition : Expression { }
internal class QuoteTemplate : Expression { }
