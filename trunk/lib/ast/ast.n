class SyntaxTree { }

internal def compile_expression();

class Expression {
  def evaluate() -> (thisÂ·compile_expression())();
}

internal class LiteralExpression : Expression { }
internal class InvokeExpression : Expression { }
internal class ClassExpression : Expression {
  internal def evaluate();
}
internal class ThisExpression : Expression { }
internal class LocalDefinition : Expression { }
internal class LambdaExpression : Expression {
  internal def parameters();
  internal def body();
}
internal class ReturnExpression : Expression { }
internal class CallExpression : Expression { }
internal class MethodExpression : Expression { }
internal class SequenceExpression : Expression { }
internal class TupleExpression : Expression { }
internal class GlobalExpression : Expression { }
internal class Symbol : Expression { }
internal class ConditionalExpression : Expression { }
internal class QuoteExpression : Expression { }
internal class BuiltinCall : Expression { }
internal class InterpolateExpression : Expression { }
internal class LocalDefinition : Expression { }
