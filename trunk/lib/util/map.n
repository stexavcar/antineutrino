protocol Map {

  static def new() -> new MapImpl() {
    table: new Array(size: 16),
    size: 0
  };

}

def get_hash() {
  return this.hash();
}

def find_entry(key, hash) {
  def index := hash % |this.table|;
  def current := this.table[index];
  while (not current = null) {
    if (current.hash = hash and current.key = key)
      return current;
    current := current.next;
  }
  return null;
}

def add_entry(entry) {
  def index := entry.hash % |this.table|;
  entry.next := this.table[index];
  this.table[index] := entry;
}

def expand(new_capacity) {
  def from_table := this.table;
  this.table := new Array(size: new_capacity);
  var i := 0;
  while (i < |from_table|) {
    var current := from_table[i];
    while (not current = null) {
      def next := current.next;
      this·add_entry(current);
      current := next;
    }
    i := i + 1;
  }
}

protocol MapImpl {

  def | | -> this.size;

  def empty?() -> |this| = 0;

  def [key]:=(value) {
    def hash := key·get_hash();
    def entry := this·find_entry(key, hash);
    if (not entry = null) {
      entry.value := value;
      return null;
    }
    if (this.size > |this.table|)
      this·expand(|this.table| × 2);
    this·add_entry(HashMapEntry.make(key, hash, value));
    this.size := this.size + 1;
  }
  
  def [key] {
    def hash := key·get_hash();
    def entry := this·find_entry(key, hash);
    if (entry = null) return null;
    return entry.value;
  }

}

protocol HashMapEntry {

  static def make(key, hash, value) -> new HashMapEntry() {
    key: key,
    hash: hash,
    value: value,
    next: null
  };

}
