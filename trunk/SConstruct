import platform, sys, os
from os.path import join, abspath, walk, basename, dirname, exists
root = dirname(File('SConstruct').rfile().abspath)
src = join(root, 'src')
etc = join(root, 'etc')

# Append the tools directory to the python load path to make the
# utility scripts available
sys.path.append(join(root, 'tools'))

import buildutils, testutils

# Determines the toolchain that is currently being used
def get_toolchain_id():
  tools = Environment()['TOOLS']
  if 'gcc' in tools: return 'gcc'
  if 'msvc' in tools: return 'msvc'
  print 'Could not determine toolchain; exiting.'
  sys.exit(-1)

# Determines the current OS
def get_os_id():
  if platform.system() == 'Linux': return 'linux'
  elif platform.system() == 'Darwin': return 'macos'
  elif platform.system() == 'Windows': return 'win32'
  else: return 'unknown'

# Determines which processor architecture is being used
def get_arch_id():
  return 'ia32'

# Reads a named configuration file
def read_config(files):
  config = None
  for file in files:
    if not exists(file): continue
    config = buildutils.read_config_file(file, config)
  return config

toolchain_config = join(etc, get_toolchain_id() + '.cfg')
os_config = join(etc, get_os_id() + '.cfg')

configurations = read_config([toolchain_config, os_config])

options = Options()
options.Add(EnumOption(
  'mode',
  'select build mode',
  'all',
  allowed_values = configurations.targets + ['all']
))
options.Add(PathOption(
  'test',
  'run only selected test',
  '.',
  PathOption.PathAccept
))
options.Add(EnumOption(
  'progress',
  'format of test progress status',
  'color',
  allowed_values = ['dots', 'color']
))
for option in configurations.options.values():
  name = option.name
  values = [ sec.name for sec in option.values.values() ]
  default = option.default
  options.Add(EnumOption(
    name,
    name,
    default,
    allowed_values = values
  ))
common = Environment(
  options = options,
  CPPPATH = [abspath(src), abspath(join(root, 'test'))],
  ENV     = {'PATH': os.environ['PATH']}
)

selected_test = common['test']
if selected_test == '.': selected_test = None

# Set up a configuration object that contains all settings that may
# be used by this or other parts of the build system
config = {
 'toolchain':  get_toolchain_id(),
 'arch':       get_arch_id(),
 'os':         get_os_id(),
 'name':       'neutrino',
 'targets':    configurations,
 'bin':        abspath('.'),
 'root':       abspath(root),
 'src':        abspath(src),
 'etc':        abspath(etc),
 'test':       selected_test,
 'tests':      [],
 'check-deps': []
}

build_dir = 'bin'

# Sets up the build for the various targets defined in the target
# configuration file in src/
def load_source_targets():
  options = { }
  for option in configurations.options.values():
    options[option.name] = common[option.name]
  # At this point we don't use the contents of the section, we
  # just delegate to the SConscript file in src/
  if common['mode'] == 'all':
    Alias('program')
    Alias('natives')
  for target in config['targets'].targets:
    properties = config['targets'].get_properties(target, options, [])
    native_properties = config['targets'].get_properties(target, options, ['natives'])
    if (common['mode'] == 'all') or (common['mode'] == target):
      if common['mode'] == 'all': prefix = target + '-'
      else: prefix = ''
      build = abspath(join(build_dir, target + '-natives'))
      SConscript(
        join('natives', 'SConscript'),
        build_dir = build,
        exports = 'config target native_properties common prefix build',
        duplicate = False
      )
      SConscript(
        join('src', 'SConscript'),
        build_dir = join(build_dir, target),
        exports = 'config target properties prefix',
        duplicate = False
      )
      build = abspath(join(build_dir, target + '-test'))
      SConscript(
        join('test', 'SConscript'),
        build_dir = build,
        exports = 'config target properties common prefix build',
        duplicate = False
      )

def run_tests(target, source, env):
  testutils.run_neutrino_tests(config['tests'], common['progress'])

if abspath('.') == abspath(root):
  print """
Because of the way scons works you should not build in the root
directory.  Sorry for the inconvenience and have a nice day.
"""
  sys.exit(1)

load_source_targets()

Command('check', config['check-deps'], Action(run_tests, None))

Default(['program', 'natives'])
