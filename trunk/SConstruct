import platform, sys, os
from os.path import join, abspath, walk, basename

# Append the tools directory to the python load path to make the
# utility scripts available
sys.path.append(abspath('tools'))

import buildutils

# Determines the toolchain that is currently being used
def get_toolchain_id():
  tools = Environment()['TOOLS']
  if 'gcc' in tools: return 'gcc'
  if 'msvc' in tools: return 'msvc'
  print 'Could not determine toolchain; exiting.'
  sys.exit(-1)

# Determines the current OS
def get_os_id():
  if platform.system() == 'Linux': return 'linux'
  elif platform.system() == 'Darwin': return 'macos'
  elif platform.system() == 'Windows': return 'win32'
  else: return 'unknown'

# Determines which processor architecture is being used
def get_arch_id():
  return 'ia32'
  
# Reads a named configuration file
def read_config(name):
  return buildutils.read_config_file(name)

targets_file = 'targets.' + get_toolchain_id() + '.cfg'

# Set up a configuration object that contains all settings that may
# be used by this or other parts of the build system
config = {
 'toolchain': get_toolchain_id(),
 'arch':      get_arch_id(),
 'os':        get_os_id(),
 'name':      'neutrino',
 'targets':   read_config(join('src', targets_file)),
 'src':       abspath('.')
}

def generate_coverage_report(source, target, env):
  covered = []
  def add_report_file(arg, dirname, fnames):
    for file in fnames:
      if file.endswith('.gcda'):
        file = file.replace('.gcda', '.cc')
        covered.append([join(arg, basename(dirname)), file])
  walk(abspath(join('build', 'debug-coverage')), add_report_file, join('build', 'debug-coverage'))
  walk(abspath(join('build', 'test', 'cctest-debug-coverage')), add_report_file, join('build', 'test'))
  command = 'gcov'
  for [dir, file] in covered:
    command += ' -o ' + dir + ' ' + file
  command += ' > coverage.info'
  print command
  os.system(command)

common = Environment(CPPPATH=[abspath('src'), abspath('test')])
common['BUILDERS']['GenerateCoverageReport'] = Builder(action = generate_coverage_report)

# Sets up the build for the various targets defined in the target
# configuration file in src/
def load_source_targets():
  targets = config['targets']
  # At this point we don't use the contents of the section, we
  # just delegate to the SConscript file in src/
  for (target, properties) in targets.items():
    SConscript(
      join('src', 'SConscript'),
      build_dir = join('build', target),
      exports = 'config target properties',
      duplicate = False
    )

load_source_targets()

# Load tests
SConscript(
  join('test', 'SConscript'),
  build_dir = join('build', 'test'),
  exports = 'config common',
  duplicate = False
)

report_coverage_target = common.GenerateCoverageReport('coverage', ['debug-coverage-check', 'check-scheduled-tests'])
common.Alias('coverage', [report_coverage_target])
common.AlwaysBuild(report_coverage_target)

Default('check')
