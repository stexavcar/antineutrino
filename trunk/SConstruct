import platform, sys, os
from os.path import join, abspath, walk, basename

# Append the tools directory to the python load path to make the
# utility scripts available
sys.path.append(abspath('tools'))

import buildutils, testutils

# Determines the toolchain that is currently being used
def get_toolchain_id():
  tools = Environment()['TOOLS']
  if 'gcc' in tools: return 'gcc'
  if 'msvc' in tools: return 'msvc'
  print 'Could not determine toolchain; exiting.'
  sys.exit(-1)

# Determines the current OS
def get_os_id():
  if platform.system() == 'Linux': return 'linux'
  elif platform.system() == 'Darwin': return 'macos'
  elif platform.system() == 'Windows': return 'win32'
  else: return 'unknown'

# Determines which processor architecture is being used
def get_arch_id():
  return 'ia32'

# Reads a named configuration file
def read_config(name):
  return buildutils.read_config_file(name)

targets_file = 'targets.' + get_toolchain_id() + '.cfg'

configurations = read_config(join('src', targets_file))

options = Options()
options.Add(EnumOption(
  'mode',
  'select build mode',
  'all',
  allowed_values = configurations.keys() + ['all']
))
options.Add(PathOption(
  'test',
  'run only selected test',
  '.',
  PathOption.PathAccept
))
common = Environment(
  options = options,
  CPPPATH=[abspath('src'), abspath('test')]
)

selected_test = common['test']
if selected_test == '.': selected_test = None

# Set up a configuration object that contains all settings that may
# be used by this or other parts of the build system
config = {
 'toolchain':  get_toolchain_id(),
 'arch':       get_arch_id(),
 'os':         get_os_id(),
 'name':       'neutrino',
 'targets':    configurations,
 'base':       abspath('.'),
 'src':        abspath('src'),
 'test':       selected_test,
 'tests':      [],
 'check-deps': []
}

# Sets up the build for the various targets defined in the target
# configuration file in src/
def load_source_targets():
  targets = config['targets']
  # At this point we don't use the contents of the section, we
  # just delegate to the SConscript file in src/
  for (target, properties) in targets.items():
    if (common['mode'] == 'all') or (common['mode'] == target):
      if common['mode'] == 'all': prefix = target + '-'
      else: prefix = ''
      SConscript(
        join('src', 'SConscript'),
        build_dir = join('build', target),
        exports = 'config target properties prefix',
        duplicate = False
      )
      build = abspath(join('build', target + '-test'))
      SConscript(
        join('test', 'SConscript'),
        build_dir = build,
        exports = 'config target properties common prefix build',
        duplicate = False
      )

def run_tests(target, source, env):
  testutils.run_neutrino_tests(config['tests'])

load_source_targets()

Command('check', config['check-deps'], Action(run_tests, None))
Default('check')
