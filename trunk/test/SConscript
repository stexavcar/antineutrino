from os.path import join, abspath
from buildutils import apply_items, read_lines_from
from pyneu.internal.scanner import KEYWORDS, MODIFIERS
from testutils import run_neutrino_tests, is_selected, CustomTestCase, Result
Import('config common prefix properties target build')

# Instantiate the test builders for each configuration
env = common.Copy()
apply_items(env, properties)

old_build = build

build = abspath(join(old_build, 'cctest'))
env.SConscript(
  join('cctest', 'SConscript'),
  exports = 'config env target prefix config build',
  duplicate = False
)

build = abspath(join(old_build, 'language'))
env.SConscript(
  join('language', 'SConscript'),
  exports = 'config env target prefix config build',
  duplicate = False
)

# Checks that the files listed in misc/keyword-checks.list contain
# all keywords between the specified markers
def check_keywords():
  list = join(config['root'], 'misc', 'etc', 'keyword-checks.list')
  for name in read_lines_from(list):
    lines = [ ]
    # Read the contents between the begin and end markers into the
    # lines list
    seen_begin_marker = False
    for line in open(join(config['root'], name)):
      if seen_begin_marker:
        if "-- end keywords --" in line:
          seen_begin_marker = False
          break
        else:
          lines.append(line)
      elif "-- begin keywords --" in line:
        seen_begin_marker = True
    assert not seen_begin_marker
    block = ''.join(lines)
    # Test if each keyword occurs in the block we just read
    for keyword in (KEYWORDS.keys() + MODIFIERS.keys()):
      if keyword not in block:
        return Result(Result.FAILED, error="Keyword '" + keyword + "' not present in " + name)
  return Result(Result.PASSED)

if is_selected(config, 'keywords'):
  test = CustomTestCase('check keywords', check_keywords)
  config['tests'].append(test)
