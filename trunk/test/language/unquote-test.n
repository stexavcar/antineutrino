def simple_unquote_test() {
  def x := «3»;
  assert «2 + ‹x›».evaluate() = 5;
}

def factorial_code(n) {
  if (n = 0) return «1»;
  else return «‹factorial_code(n - 1)› × ‹lift(n)›»;
}

def lift_test() {
  def code := factorial_code(6);
  assert code.evaluate() = 720;
}

def make_power(s, n) {
  if (n = 0) return «1»;
  else return «‹s› × ‹make_power(s, n - 1)›»;
}

def make_power_test() {
  def s := new Symbol();
  def body := make_power(s, 8);
  def fun := «fn (‹s›) -> ‹body›»;
  def power := fun.evaluate();
  assert power(2) = 256;
}

def main() {
  simple_unquote_test();
  lift_test();
  make_power_test();
}
