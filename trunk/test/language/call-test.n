def fun(a, b, c, d, e) {
  assert_equals(3, a);
  assert_equals(6, b);
  assert_equals(10, c);
  assert_equals(1, d);
  assert_equals(7, e);
  return a + b + c + d + e;
}

def get_void() { }

def get_this() -> this;

def test_calls() {
  assert_equals(27, fun(3, 6, 10, 1, 7));
  assert_equals(get_void(), get_this());
  assert_equals("foo", "foo"·get_this());
}

def call_get_this() -> get_this();

def test_implicit_self() {
  assert_equals(8, 8·call_get_this());
}

def get_x(x:, y:) -> x;
def get_y(x:, y:) -> y;

def test_keywords() {
  assert_equals(1, get_x(x: 1, y: 2));
  assert_equals(4, get_x(y: 3, x: 4));
  assert_equals(6, get_y(x: 5, y: 6));
  assert_equals(7, get_y(y: 7, x: 8));
}

protocol X {
  static def argc() -> 0;
  static def argc(x) -> 1;
  static def argc(x, y) -> 2;
  static def argc(x, y, z) -> 3;
}

def test_overloading() {
  assert_equals(0, X.argc());
  assert_equals(1, X.argc(0));
  assert_equals(2, X.argc(0, 0));
  assert_equals(3, X.argc(0, 0, 0));  
}

def main() {
  test_calls();
  test_implicit_self();
  test_overloading();
  // test_keywords();
}
