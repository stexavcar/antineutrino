def fun(a, b, c, d, e) {
  assert a = 3;
  assert b = 6;
  assert c = 10;
  assert d = 1;
  assert e = 7;
  return a + b + c + d + e;
}

def get_this() -> this;

def test_calls() {
  assert fun(3, 6, 10, 1, 7) = 27;
  assert get_this() = get_void();
  assert "foo"·get_this() = "foo";
}

def call_get_this() -> get_this();

def test_implicit_self() {
  assert 8·call_get_this() = 8;
}

protocol X {
  static def argc() -> 0;
  static def argc(x) -> 1;
  static def argc(x, y) -> 2;
  static def argc(x, y, z) -> 3;
  
  static def get_x(x:, y:) -> x;
  static def get_y(x:, y:) -> y;
}

def test_overloading() {
  assert X.argc() = 0;
  assert X.argc(0) = 1;
  assert X.argc(0, 0) = 2;
  assert X.argc(0, 0, 0) = 3;  
}

def test_simple_keywords() {
  assert X.get_x(x: 1, y: 2) = 1;
  assert X.get_x(y: 3, x: 4) = 4;
  assert X.get_y(x: 5, y: 6) = 6;
  assert X.get_y(y: 7, x: 8) = 7;
}

protocol X2 {
  static def get_arg(i, a, b, c:, d:, e:) {
    if (i = 0) return a;
    else if (i = 1) return b;
    else if (i = 2) return c;
    else if (i = 3) return d;
    else return e;
  }
}

def test_mixed_keywords() {
  assert X2.get_arg(0,  1,  2, c:  3, d:  4, e:  5) =  1;
  assert X2.get_arg(1,  6,  7, c:  8, d:  9, e: 10) =  7;
  assert X2.get_arg(2, 11, 12, c: 13, d: 14, e: 15) = 13;
  assert X2.get_arg(3, 16, 17, c: 18, d: 19, e: 20) = 19;
  assert X2.get_arg(4, 21, 22, c: 23, d: 24, e: 25) = 25;
  
  assert X2.get_arg(0,  1,  2, c:  3, d:  4, e:  5) =  1;
  assert X2.get_arg(1,  6,  7, d:  8, e:  9, c: 10) =  7;
  assert X2.get_arg(2, 11, 12, e: 13, c: 14, d: 15) = 14;
  assert X2.get_arg(3, 16, 17, c: 18, d: 19, e: 20) = 19;
  assert X2.get_arg(4, 21, 22, d: 23, e: 24, c: 25) = 24;
}

protocol Counter {
  def get(expected_value, result) {
    assert this.value = expected_value;
    this.value := this.value + 1;
    return result;
  }
  static def new() -> new Counter() { value: 0 };
}

def id(a, b, c) -> "${this} ${a} ${b} ${c}";

def test_call_order() {
  def c := new Counter();
  def r := (c.get(0, "foo"))·(c.get(1, id))(c.get(2, "x"), c.get(3, "y"), c.get(4, "z"));
  assert r = "foo x y z";
}

def main() {
  test_calls();
  test_implicit_self();
  test_overloading();
  test_simple_keywords();
  test_mixed_keywords();
  test_call_order();
}
