def test_expressions() {
  «1 + 1 + 1»;
  assert_equals("#<protocol Boolean>", Boolean.to_string());
  assert_equals("#<protocol Foo>", «protocol Foo { }».evaluate().to_string());
  assert_equals("#<protocol Foo>", «protocol Foo { def x() -> 4; }».evaluate().to_string());
  assert_equals(4, new («protocol Foo { def x() -> 4; }».evaluate())().x());
  assert_equals(2, new («protocol Foo { def x() { 1; return 2; 3; } }».evaluate())().x());
  assert_equals(2, new («protocol Foo { def x() -> 1 + 1; }».evaluate())().x());
  assert_equals([1, 2, 3], new («protocol Foo { def x() -> [1, 2, 3]; }».evaluate())().x());
  assert_equals(get_this, new («protocol Foo { def x() -> get_this; }».evaluate())().x());
  assert_equals(7, new («protocol Foo { def x() -> 7·get_this(); }».evaluate())().x());
  assert_equals(true, new («protocol Foo { def x() -> true; }».evaluate())().x());
  assert_equals(false, new («protocol Foo { def x() -> false; }».evaluate())().x());
  assert_equals(null, new («protocol Foo { def x() -> null; }».evaluate())().x());
  assert_equals(9, new («protocol Foo { def x(a, b, c) -> a; }».evaluate())().x(9, 8, 7));
  assert_equals(5, new («protocol Foo { def x(x) -> if (x) 9 else 5; }».evaluate())().x(false));
  assert_equals("«this»", new («protocol Foo { def x() -> «this»; }».evaluate())().x().to_string());
}

def expression_evaluation_test() {
  assert_equals(7, «3 + 4».evaluate());
}

def get_this() -> this;

def main() {
  test_expressions();
  expression_evaluation_test();
}
