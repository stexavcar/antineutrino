def test_expressions() {
  «1 + 1 + 1»;
  assert Bool.to_string() = "#<protocol Bool>";
  assert «protocol Foo { }».evaluate().to_string() = "#<protocol Foo>";
  assert "#<protocol Foo>" = «protocol Foo { def x() -> 4; }».evaluate().to_string();
  assert 4 = new («protocol Foo { def x() -> 4; }».evaluate())().x();
  assert 2 = new («protocol Foo { def x() { 1; return 2; 3; } }».evaluate())().x();
  assert 2 = new («protocol Foo { def x() -> 1 + 1; }».evaluate())().x();
  assert [1, 2, 3] = new («protocol Foo { def x() -> [1, 2, 3]; }».evaluate())().x();
  assert get_this = new («protocol Foo { def x() -> get_this; }».evaluate())().x();
  assert 7 = new («protocol Foo { def x() -> 7·get_this(); }».evaluate())().x();
  assert true = new («protocol Foo { def x() -> true; }».evaluate())().x();
  assert false = new («protocol Foo { def x() -> false; }».evaluate())().x();
  assert null = new («protocol Foo { def x() -> null; }».evaluate())().x();
  assert 9 = new («protocol Foo { def x(a, b, c) -> a; }».evaluate())().x(9, 8, 7);
  assert 5 = new («protocol Foo { def x(x) -> if (x) 9 else 5; }».evaluate())().x(false);
  assert "«this»" = new («protocol Foo { def x() -> «this»; }».evaluate())().x().to_string();
}

def expression_evaluation_test() {
  assert «3 + 4».evaluate() = 7;
}

def get_this() -> this;

def main() {
  test_expressions();
  expression_evaluation_test();
}
