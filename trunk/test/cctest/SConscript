import re
from buildutils import read_list_file
from os.path import abspath, join, basename
from testutils import CCTestCase
Import('config target env scheduled_tests')

cctest_files = read_list_file('tests.list')

generated_file_template = """
// This file was generated by test/cctest/SConscript from the test
// case %(file)s.
#include "utils/checks.h"
#line 1 "%(file)s"
%(contents)s
#line 1
#include "utils/globals.h"
#include "utils/string.h"
int main(int argc, const char* argv[]) {
  bool has_run_tests = false;
  for (int i = 1; i < argc; i++) {
    const char* current = argv[i];
    %(cases)s
  }
  if (!has_run_tests)
    printf("Warning: no tests were run.\\n");
  exit(0);
}
"""

test_case_template = """
  if (neutrino::string::equals(current, "%(name)s")) {
    has_run_tests = true;
    test_%(name)s();
  }
"""

test_case_matcher = re.compile(r'^\s*(?:static)?\s*void\s+test_(\w+)\s*\(\s*\)\s*{\s*$', re.M)

def find_test_functions(test_case):
  return test_case_matcher.findall(File(test_case).get_contents())

def schedule_test(source, target, env):
  file_name_base = str(target[0])[:-9]
  # Add test cases to the list of scheduled tests
  functions = find_test_functions(file_name_base + '.cc')
  for function in functions:
    test_case = CCTestCase(file_name_base, function)
    scheduled_tests.append(test_case)
  # Ensure that check-scheduled-tests is not built before the program
  # has been built
  env.Depends('check-scheduled-tests', file_name_base)

def generate_runner(source, target, env):
  source_file_name = str(source[0])
  contents = File(source_file_name).get_contents()
  matches = test_case_matcher.findall(contents)
  cases = ''
  for match in matches:
    cases += (test_case_template % { 'name': match })
  text = generated_file_template % {
    'file': source_file_name,
    'contents': contents,
    'cases': cases
  }
  output = open(str(target[0]), "w")
  output.write(text)
  output.close()

env['BUILDERS']['ScheduleCCTest'] = Builder(action = schedule_test)
env['BUILDERS']['GenerateRunner'] = Builder(action = generate_runner)

def add_schedulers():
  schedulers = []
  programs = []
  for cctest_file in cctest_files:
    file_name_base = cctest_file[:-3]
    target_test_name = target + '-' + file_name_base
    scheduled_name = file_name_base + '-schedule'
    source_file = cctest_file
    scheduled = env.ScheduleCCTest(scheduled_name, cctest_file)
    env.AlwaysBuild(scheduled)
    env.Alias(target_test_name, scheduled)
    schedulers.append(scheduled)
    generated_name = file_name_base + '-runner.cc'
    # Ensure that the runner script has been built
    generate = env.GenerateRunner(generated_name, [source_file])
    # Ensure that the test program has been built
    program = env.Program(file_name_base, [ generated_name ])
    programs.append(program)
  env.AlwaysBuild(Alias(target + '-check', schedulers))
  env.AlwaysBuild(Alias(target + '-tests', programs))

add_schedulers()
