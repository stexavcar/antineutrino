Import('env build config prefix')
from os.path import join, walk, abspath, exists
from testutils import PyNeutrinoTestCase, is_selected

executable = abspath(str(config[prefix + 'program']))

compiler = join(config['root'], 'tools', 'compiler.py')
env['BUILDERS']['CompilePyNeutrinoTest'] = Builder(action = "python " + compiler + " -c " + join(config['src'], 'utils', 'consts.h') + ' ' + join(config['root'], 'lib') + " $SOURCE -o $TARGET")

def add_test(arg, dir, fnames):
  tests = []
  for fname in fnames:
    if fname.endswith('.n') and is_selected(config, fname):
      full_path = join(dir, fname)
      short_name = fname[:-2]
      compiled_name = short_name + '.nc'
      compile = env.CompilePyNeutrinoTest(compiled_name, full_path)
      env.Depends(compile, compiler)
      test_case = PyNeutrinoTestCase(executable, abspath(join(build, compiled_name)))
      config['tests'].append(test_case)
      config['check-deps'].append(compile)
      config['check-deps'].append(executable)

# We have to manually construct the absolute path because otherwise
# scons screws us over by creating an empty clone of the core folder
# in the build directory and automagically using that.
root = join(config['root'], 'test', 'core')
assert exists(root)
walk(root, add_test, None)
