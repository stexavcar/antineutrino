def test_expressions() {
  <1 + 1 + 1>;
  assert_equals("#<class Boolean>", Boolean.to_string());
  assert_equals("#<class Foo>", <class Foo { }>.evaluate().to_string());
  assert_equals("#<class Foo>", <class Foo { def x() -> 4; }>.evaluate().to_string());
  assert_equals(4, new (<class Foo { def x() -> 4; }>.evaluate())().x());
  assert_equals(2, new (<class Foo { def x() { 1; return 2; 3; } }>.evaluate())().x());
  assert_equals(2, new (<class Foo { def x() -> 1 + 1; }>.evaluate())().x());
  assert_equals([1, 2, 3], new (<class Foo { def x() -> [1, 2, 3]; }>.evaluate())().x());
  assert_equals(get_this, new (<class Foo { def x() -> get_this; }>.evaluate())().x());
  assert_equals(7, new (<class Foo { def x() -> 7Â·get_this(); }>.evaluate())().x());
  assert_equals(true, new (<class Foo { def x() -> true; }>.evaluate())().x());
  assert_equals(false, new (<class Foo { def x() -> false; }>.evaluate())().x());
  assert_equals(null, new (<class Foo { def x() -> null; }>.evaluate())().x());
  assert_equals(9, new (<class Foo { def x(a, b, c) -> a; }>.evaluate())().x(9, 8, 7));
  assert_equals(5, new (<class Foo { def x(x) -> if (x) 9 else 5; }>.evaluate())().x(false));
  assert_equals("<this>", new (<class Foo { def x() -> <this>; }>.evaluate())().x().to_string());
}

def get_this() -> this;

def main() {
  test_expressions();
}
