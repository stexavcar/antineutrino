import sys
import platform
from os.path import abspath, join, dirname
import os

root = dirname(File('SConscript').rfile().abspath)
sys.path.append(join(root, 'tools'))
import buildcfg
import pollock
Import('settings')


spec_dir = join(root, 'etc', 'pollock')
pollock_files = [ join(spec_dir, f) for f in os.listdir(spec_dir) if f.endswith('.pollock') ]
pollock_spec = pollock.make_specificiation(spec_dir)


def process_pollock(target, source, env):
  contents = source[0].get_contents()
  output = open(target[0].rstr(), "wt")
  output.write(pollock_spec.process(source[0].rstr(), contents))
  output.close()


def setup_pollock(env):
  env['BUILDERS']['Pollock'] = Builder(
    action = process_pollock,
    suffix = {'.cc': '.pp.cc', '.h': '.pp.h', '.c': '.pp.c'}
  )


def setup_cctest_build(env, settings, libpath):
  lists = [ join(root, 'test', 'cctest', 'files.list') ]
  cctest = join(root, 'test', 'cctest')
  master_config = join(cctest, 'options.cfg')
  variables = {'root': root, 'libpath': libpath}
  config = buildcfg.build_configuration(cctest, lists, variables, master_config)
  framework = config.get_configured_files('framework', settings)
  framework_objs = [ env.Object(join('test', 'cctest', f.path), **f.flags) for f in framework ]
  tests = config.get_configured_files('tests', settings)
  objs = [ env.Object(join('test', 'cctest', f.path), **f.flags) for f in tests ]
  master_flags = config.get_master_flags(settings)
  program = env.Program('cctests', [objs, framework_objs], **master_flags)
  env.Depends('tests', program)


def setup_library_build():
  lists = [ join(root, 'src', 'files.list') ]
  master_config = join(root, 'src', 'options.cfg')
  variables = {'root': root}
  config = buildcfg.build_configuration(root, lists, variables, master_config)
  env = Environment()
  setup_pollock(env)
  master_flags = config.get_master_flags(settings)

  # Set up library build
  library_files = config.get_configured_files('library', settings)
  processed = [ (env.Pollock(join('src', f.path)), f.flags) for f in library_files ]
  for p in processed: env.Depends(p[0], pollock_files)
  all = [ env.Object(name, **flags) for (name, flags) in processed ]
  lib = env.Library('neutrino', all, **master_flags)

  # Set up program build
  main_files = config.get_configured_files('main', settings)
  processed = [ (env.Pollock(join('src', f.path)), f.flags) for f in main_files ]
  for p in processed: env.Depends(p[0], pollock_files)
  all += [ env.Object(name, **flags) for (name, flags) in processed ]
  program = env.Program('neutrino', all, **master_flags)

  # Set up natives build
  natives_list = [ join(root, 'natives', 'files.list') ]
  master_config = join(root, 'natives', 'options.cfg')
  config = buildcfg.build_configuration(root, natives_list, variables, master_config)
  natives_files = config.get_configured_files('library', settings)
  processed = [ (env.Pollock(join('natives', f.path)), f.flags) for f in natives_files ]
  natives_files = [ env.SharedObject(name, **flags) for (name, flags) in processed ]
  natives_lib = env.SharedLibrary('natives', natives_files, **master_flags)
  env.Depends('natives', natives_lib)

  env.Depends('program', [ program, natives_lib ])

  return (env, settings, dirname(lib[0].rfile().abspath))


(env, settings, libpath) = setup_library_build()
setup_cctest_build(env, settings, libpath)
