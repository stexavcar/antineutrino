Import('config root')

import os
from os.path import join, dirname, abspath
import sys
sys.path.append(join(root, 'tools'))
import pollock


spec_dir = join(root, 'etc', 'pollock')
pollock_files = [ join(spec_dir, f) for f in os.listdir(spec_dir) if f.endswith('.pollock') ]
pollock_spec = pollock.make_specificiation(spec_dir)


def process_pollock(target, source, env):
  contents = source[0].get_contents()
  output = open(target[0].rstr(), "wt")
  output.write(pollock_spec.process(source[0].rstr(), contents))
  output.close()


def setup_pollock(env):
  env['BUILDERS']['Pollock'] = Builder(
    action = process_pollock,
    suffix = {
      '.cc': '.pp.cc',
      '.c': '.pp.c',
      '.h': '.pp.h'
    }
  )


def setup():
  env = Environment(builddir=abspath('.'))
  setup_pollock(env)
  for lib in config.libraries.values():
    name = lib.name
    sub_env = env.Copy()
    sub_env.Replace(**lib.get_flags(config))
    files = [env.Pollock(f) for f in lib.get_files(config)]
    headers = [env.Pollock(h) for h in lib.get_headers(config)]
    sub_env.Depends(files + headers, pollock_files)
    obj = sub_env.Library(name, files)
    lib.object = obj
    sub_env.Alias(name, obj)
  for prog in config.programs.values():
    name = prog.name
    sub_env = env.Copy()
    sub_env.Replace(**prog.get_flags(config))
    files = [env.Pollock(f) for f in prog.get_files(config)]
    headers = [env.Pollock(h) for h in prog.get_headers(config)]
    sub_env.Depends(files + headers, pollock_files)
    for lib in prog.libs:
      files.append(config.libraries[lib].object)
    obj = sub_env.Program(name, files)
    sub_env.Alias(name, obj)


setup()
