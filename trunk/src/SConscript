import re
from array import array
from os.path import join, abspath
from buildutils import read_files_from, apply_items, escape_string
Import('config target properties prefix')

def get_wildcard_mapping():
  result = { }
  for (key, value) in config.items(): result[key.lower()] = value
  for (key, value) in properties.items(): result[key.lower()] = value
  return result


source_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'library.list'))
program_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'main', 'program.list'))

# Creates a new environment and pre-configure it based on the set
# of configuration items
def create_environment():
  result = Environment(CPPPATH=".")
  apply_items(result, properties)
  return result

env = create_environment()

generated_file_template = """\
// This file was generated by src/SConscript
#include "monitor/web.h"
#include "utils/list-inl.h"
#include "utils/string-inl.h"

namespace neutrino {

%(chunks)s

HttpReply *FileProvider::get_resource(list_buffer<string> &path) {
%(compares)s\
  return NULL;
}

} // neutrino
"""

single_resource_template = """\
static const uint32_t k%(name)sLength = %(length)s;
static const byte k%(name)s[k%(name)sLength] = { %(data)s };
"""

single_compare_template = """\
  if (path[path.length() - 1] == "%(file)s") return new HttpReply(200, k%(name)s, k%(name)sLength, false);
"""

def process_name(str):
  parts = re.split('\.|\\|/', str)
  return ''.join([ p[0].upper() + p[1:].lower() for p in parts ])

static_library = env.StaticLibrary(config['name'], source_files)
shared_library = env.SharedLibrary(config['name'], source_files)
program_libs = env['LIBS'] + [ static_library ]
program = env.Program(config['name'], program_files, LIBS = program_libs)
config[prefix + 'static-library'] = static_library[0]
config[prefix + 'shared-library'] = shared_library[0]
Alias(prefix + 'program', program)
config[prefix + 'program'] = program[0]
env.Alias(target, [static_library, program])
