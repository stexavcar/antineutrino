import re
from array import array
from os.path import join, abspath
from buildutils import read_files_from, apply_items, escape_string
Import('config target properties prefix')

def get_wildcard_mapping():
  result = { }
  for (key, value) in config.items(): result[key.lower()] = value
  for (key, value) in properties.items(): result[key.lower()] = value
  return result


source_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'library.list'))
program_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'main', 'program.list'))

# Creates a new environment and pre-configure it based on the set
# of configuration items
def create_environment():
  result = Environment(CPPPATH=["."])
  apply_items(result, properties)
  return result

env = create_environment()

static_library = env.StaticLibrary(config['name'], source_files)

program = env.Program(config['name'], [ program_files, source_files ])
env.Depends(program, config[prefix + 'natives'])
config[prefix + 'static-library'] = static_library

Alias(prefix + 'program', program)
Alias(prefix + 'lib', static_library)

config[prefix + 'program'] = program[0]
if prefix + 'program' != 'program':
  Depends('program', prefix + 'program')
env.Alias(target, [static_library, program])
