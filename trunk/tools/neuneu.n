internal def is_whitespace();
internal def is_alpha();

def is_ident_start() -> is_alpha() or (this == "_");

protocol Token {

}

protocol Scanner {
  
  def to_string() -> "#<a Scanner: ${this.pos}>";
  
  def has_more() -> (this.pos < |this.input|);
  
  def current -> this.input[this.pos];
  
  def advance() {
    this.pos := this.pos + 1;
  }
  
  def skip_spaces() {
    while (this.has_more() and this.current·is_whitespace())
      this.advance();
  }
  
  def next_token() {
    var result := null;
    if (not this.has_more()) return null;
    if (this.current·is_ident_start()) {
      result := this.scan_identifier();
    } else {
      raise unexpected_character(this.current);
    }
    return result;
  }
  
  def scan_identifier() {
    def start := this.pos;
    while (this.current·is_ident_start())
      this.advance();
    def end := this.pos;
    print("[${start} -> ${end}]");
    return null;
  }
  
  # Factory methods for creating scanners processing the specified
  # input
  static def make(input) {
    def scan := new Scanner() {
      input: input,
      pos: 0
    };
    scan.skip_spaces();
    return scan;
  }
  
}

def main() {
  def input := "def main() { }";
  def scan := Scanner.make(input);
  var i := 0;
  while (scan.has_more() and (i < 10)) {
    print(scan.next_token());
    i := i + 1;
  }
  print(scan);
}
