import re
from array import array
from os.path import join, abspath
from buildutils import read_files_from, apply_items, escape_string
import klidkiks
Import('config target properties prefix')


def get_wildcard_mapping():
  result = { }
  for (key, value) in config.items(): result[key.lower()] = value
  for (key, value) in properties.items(): result[key.lower()] = value
  return result


source_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'library.list'))
program_files = read_files_from(get_wildcard_mapping(), config['src'], join(config['src'], 'main', 'program.list'))

# Creates a new environment and pre-configure it based on the set
# of configuration items
def create_environment():
  result = Environment(CPPPATH=["."])
  apply_items(result, properties)
  return result

klidkiks_spec_file = join(config['etc'], 'annotations.kk')
klidkiks_spec = klidkiks.read_specification(open(klidkiks_spec_file, "rt").read())
def process(target, source, env):
  contents = source[0].get_contents()
  output = open(target[0].rstr(), "wt")
  output.write(klidkiks_spec.process(source[0].rstr(), contents))
  output.close()

env = create_environment()

env['BUILDERS']['KlidKiks'] = Builder(
  action = process,
  suffix = {'.cc': '.kk.cc', '.h': '.kk.h', '.c': '.kk.c'}
)

def run_klidkiks(f):
  result = env.KlidKiks(f)
  env.Depends(result, klidkiks_spec_file)
  return result

processed_source_files = [ run_klidkiks(f) for f in source_files ]
processed_program_files = [ run_klidkiks(f) for f in program_files ]

static_library = env.StaticLibrary(config['name'], processed_source_files)

program = env.Program(config['name'], processed_program_files + processed_source_files)
env.Depends(program, config[prefix + 'natives'])
config[prefix + 'static-library'] = static_library

Alias(prefix + 'program', program)
Alias(prefix + 'lib', static_library)

config[prefix + 'program'] = program[0]
if prefix + 'program' != 'program':
  Depends('program', prefix + 'program')
env.Alias(target, [static_library, program])
