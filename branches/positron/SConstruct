import sys
from os.path import dirname, join, basename, exists, abspath

root = dirname(File('SConstruct').rfile().abspath)
sys.path.append(root)
from tools import build, pollock


def guess_toolchain():
  tools = Environment()['TOOLS']
  if 'gcc' in tools:
    return 'gcc'
  elif 'msvc' in tools:
    return 'msvc'
  else:
    return None


kOptions = [
  ('mode', {
    'values': ['debug', 'release'],
    'default': 'release'
  }),
  ('wordsize', {
    'values': ['32', '64'],
    'default': '32'
  }),
  ('toolchain', {
    'values': ['msvc', 'gcc'],
    'default': guess_toolchain()
  })
]


def configure(relative_root, build_config, pollock_path):
  opts = Options()
  for (key, value) in kOptions:
    opts.Add(EnumOption(key, '', value['default'], allowed_values=value['values']))
  env = Environment(options = opts)
  Help(opts.GenerateHelpText(env))
  options = { }
  for (key, value) in kOptions:
    options[key] = env.Dictionary()[key]
  config = build.read_build_file(relative_root, build_config, options)
  pollock_processor = pollock.read_processor(pollock_path)
  variant = "-".join([options[n[0]] for n in kOptions])
  target_dir = abspath('.')
  SConscript(
    'SConscript',
    exports = 'config pollock_processor options target_dir',
    duplicate = False,
    build_dir = join('obj', variant)
  )


configure('.', join(root, 'build'), join(root, 'src', 'pollock'))
