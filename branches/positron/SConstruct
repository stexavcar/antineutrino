import sys
from os.path import dirname, join, basename, exists, abspath

root = dirname(File('SConstruct').rfile().abspath)
sys.path.append(root)
from tools import build, pollock, do


def guess_toolchain():
  tools = Environment()['TOOLS']
  if 'gcc' in tools:
    return 'gcc'
  elif 'msvc' in tools:
    return 'msvc'
  else:
    return None


def guess_option(key):
  if key == 'toolchain':
    return guess_toolchain()
  else:
    return 'guess'


def configure(relative_root, build_config, pollock_path):
  opts = Options()
  for (key, value) in do.OPTIONS:
    opts.Add(EnumOption(key, '', value['default'], allowed_values=value['values']))
  env = Environment(options = opts)
  Help(opts.GenerateHelpText(env))
  options = { }
  variant_parts = [ ]
  for (key, value) in do.OPTIONS:
    setting = env.Dictionary()[key]
    if setting == 'guess':
      setting = guess_option(key)
    options[key] = setting
    is_default = (setting == value['default'])
    if not is_default or value.get('always_in_variant', False):
      variant_parts.append(setting)
  config = build.read_build_file(relative_root, build_config, options)
  pollock_processor = pollock.read_processor(pollock_path)
  variant = "-".join(variant_parts)
  target_dir = abspath('.')
  SConscript(
    'SConscript',
    exports = 'config pollock_processor options target_dir',
    duplicate = False,
    build_dir = join('obj', variant)
  )


configure('.', join(root, 'build'), join(root, 'src', 'pollock'))
