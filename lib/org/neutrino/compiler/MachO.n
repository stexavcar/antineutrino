(*
 * This is based on
 * http://developer.apple.com/documentation/DeveloperTools/Conceptual/MachORuntime/index.html
 *)
 
(* cpu_type_t *)
def CPU_TYPE_VAX := 1;
def CPU_TYPE_MC680x0 := 6;
def CPU_TYPE_X86 := 7;
def CPU_TYPE_I386 := CPU_TYPE_X86;
def CPU_TYPE_X86_64 := CPU_TYPE_X86 | CPU_ARCH_ABI64;
def CPU_TYPE_MC98000 := 10;
def CPU_TYPE_HPPA := 11;
def CPU_TYPE_MC88000 := 13;
def CPU_TYPE_SPARC := 14;
def CPU_TYPE_I860 := 15;
def CPU_TYPE_POWERPC := 18;
def CPU_TYPE_POWERPC64 := CPU_TYPE_POWERPC | CPU_ARCH_ABI64;

(* load commands *)
def LC_UUID := 16r1B;
def LC_SEGMENT := 16r01;
def LC_SEGMENT_64 := 16r19;
def LC_SYMTAB := 16r2;
def LC_DYSYMTAB := 16rB;
def LC_THREAD := 16r4;
def LC_UNIXTHREAD := 16r5;
def LC_LOAD_DYLIB := 16rC;
def LC_ID_DYLIB := 16rD;
def LC_PREBOUND_DYLIB := 16r10;
def LC_LOAD_DYLINKER := 16rE;
def LC_ID_DYLINKER := 16rF;
def LC_ROUTINES := 16r11;
def LC_TWOLEVEL_HINTS := 16r16;
def LC_SUB_FRAMEWORK := 16r12;
def LC_SUB_UMBRELLA := 16r13;
def LC_SUB_LIBRARY := 16r15;
def LC_SUB_CLIENT := 16r14;

def (this: ByteArray).get_int32(index) -> 
    this[index]
  | (this[index + 1] << 8)
  | (this[index + 2] << 16)
  | (this[index + 3] << 24);

def (this: ByteArray).get_c_string(from, to) {
  ref result := "";
  for (def i : from .. to) {
    def ord := this[i];
    def chr := string_from_ordinal(ord);
    result := result + chr
  }
  result;
}

def (this: ByteArray).get_c_string(from) {
  ref offset := from;
  ref result := "";
  with_1cc return -> loop(fn () {
    def ord := this[offset];
    if ord = 0 then return.fire(result);
    def chr := string_from_ordinal(ord);
    result := result + chr;
    offset := offset + 1
  });
}

(* A view of a region within a byte array. *)
protocol BlobView;
def BlobView is ByteArray;

def BlobView.new(data, offset) -> new BlobView { data := data, offset := offset };

def (this: BlobView)[index: Integer] -> this.data[this.offset + index];

(*
 * struct mach_header {
 *   uint32_t magic;
 *   cpu_type_t cputype;
 *   cpu_subtype_t cpusubtype;
 *   uint32_t filetype;
 *   uint32_t ncmds;
 *   uint32_t sizeofcmds;
 *   uint32_t flags;
 * };
 *)
protocol MachHeader;

def MachHeader.new(data) -> new MachHeader { data := data };

def (this: MachHeader).write(out) {
  out.write_int32(this.magic);
  out.write_int32(this.cputype);
  out.write_int32(this.cpusubtype);
  out.write_int32(this.filetype);
  out.write_int32(this.ncmds);
  out.write_int32(this.sizeofcmds);
  out.write_int32(this.flags);
}

def (this: MachHeader).magic -> this.data.get_int32(0);

def (this: MachHeader).cputype -> this.data.get_int32(4);

def (this: MachHeader).cpusubtype -> this.data.get_int32(8);

def (this: MachHeader).filetype -> this.data.get_int32(12);

def (this: MachHeader).ncmds -> this.data.get_int32(16);

def (this: MachHeader).sizeofcmds -> this.data.get_int32(20);

def (this: MachHeader).flags -> this.data.get_int32(24);

(*
 * struct load_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 * };
 *)
protocol LoadCommand;

def LoadCommand.new(file, data) {
  def cmd := data.get_int32(0);
  if cmd = LC_SEGMENT then
    new SegmentCommand(file, data)
  else if cmd = LC_SYMTAB then
    new SymtabCommand { data := data }
  else if cmd = LC_DYSYMTAB then
    new DySymtabCommand { data := data }
  else if cmd = LC_LOAD_DYLINKER then
    new DyLinkerCommand { data := data }
  else if cmd = LC_UUID then
    new UuidCommand { data := data }
  else if cmd = LC_UNIXTHREAD then
    new ThreadCommand { data := data }
  else if cmd = LC_LOAD_DYLIB then
    new DylibCommand { data := data }
  else
    new LoadCommand { data := data }
}

def (this: LoadCommand).cmd -> this.data.get_int32(0);

def (this: LoadCommand).cmdsize -> this.data.get_int32(4);

def (this: LoadCommand).to_string -> "#<a LoadCommand #" + this.cmd.to_string + ">";

def (this: LoadCommand).write(out) {
  out.write_data(this.data, 0, this.cmdsize);
}

def (this: LoadCommand).print -> print(this);

def (this: LoadCommand).sections -> fn for (fun) { };

(*
 * struct segment_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 *   char segname[16];
 *   uint32_t vmaddr;
 *   uint32_t vmsize;
 *   uint32_t fileoff;
 *   uint32_t filesize;
 *   vm_prot_t maxprot;
 *   vm_prot_t initprot;
 *   uint32_t nsects;
 *   uint32_t flags;
 * };
 *)
protocol SegmentCommand;
def SegmentCommand is LoadCommand;

def SegmentCommand.new(file, data) {
  def segname := data.get_c_string(8, 24);
  def nsects := data.get_int32(48);
  def sections := new ArrayList(nsects);
  for (def i : 0 .. nsects) {
    def offset := SegmentCommand.size + (i * Section.size);
    def section := new Section(file, new BlobView(data, offset));
    sections[i] := section;
  }
  new SegmentCommand {
    data := data,
    segname := segname,
    sections := sections
  };
}

def SegmentCommand.size -> 56;

def (this: SegmentCommand).to_string -> "#<a SegmentCommand: " + this.segname + ">";

def (this: SegmentCommand).print {
  print("--- Section: " + this.segname + " ---");
  for (def section : this.sections)
    section.print();
}

def (this: SegmentCommand).sections -> fn for (fun) {
  for (def section : this.sections)
    fun(section);
};

(*
 * struct section {
 *   char sectname[16];
 *   char segname[16];
 *   uint32_t addr;
 *   uint32_t size;
 *   uint32_t offset;
 *   uint32_t align;
 *   uint32_t reloff;
 *   uint32_t nreloc;
 *   uint32_t flags;
 *   uint32_t reserved1;
 *   uint32_t reserved2;
 * };
 *)
protocol Section;

def Section.new(file, data) {
  def size := data.get_int32(36);
  def offset := data.get_int32(40);
  def sectname := data.get_c_string(0, 16);
  def segname := data.get_c_string(16, 32);
  if (segname = "__TEXT") and (sectname = "__cstring") then
    new CStringSection(file, new BlobView(file, offset), size)
  else
    new Section {
      file := file,
      data := data,
      sectname := sectname,
      segname := segname
    };
}

def Section.size -> 68;

def (this: Section).to_string -> "#<a Section: " + this.sectname + " " + this.segname + ">";

def (this: Section).size -> this.data.get_int32(36);

def (this: Section).offset -> this.data.get_int32(40);

def (this: Section).write(out) {
  def start := this.offset;
  def end := start + this.size;
  out.write_data(this.data, start, end);
}

def (this: Section).print {
  print(" * " + this.segname + ", " + this.sectname);
}

protocol CStringSection;
def CStringSection is Section;

def CStringSection.new(file, data, size) {
  def strs := new ArrayList(0);
  ref cursor := 0;
  with_1cc break -> loop(fn () {
    if cursor = size then break.fire(null);
    def str := data.get_c_string(cursor);
    strs.add(str);
    cursor := cursor + str.length + 1;
  });
  new CStringSection { file := file, data := data, strings := strs }
}

def (this: CStringSection).print {
  print(" * __TEXT, __cstring");
  for (def str : this.strings)
    print("   - '" + str + "'");
}

(*
 * struct symtab_command {
 *   uint_32 cmd;
 *   uint_32 cmdsize;
 *   uint_32 symoff;
 *   uint_32 nsyms;
 *   uint_32 stroff;
 *   uint_32 strsize;
 * };
 *)
protocol SymtabCommand;
def SymtabCommand is LoadCommand;

def (this: SymtabCommand).to_string -> "#<a SymtabCommand>";

(*
 * struct dysymtab_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 *   uint32_t ilocalsym;
 *   uint32_t nlocalsym;
 *   uint32_t iextdefsym;
 *   uint32_t nextdefsym;
 *   uint32_t iundefsym;
 *   uint32_t nundefsym;
 *   uint32_t tocoff;
 *   uint32_t ntoc;
 *   uint32_t modtaboff;
 *   uint32_t nmodtab;
 *   uint32_t extrefsymoff;
 *   uint32_t nextrefsyms;
 *   uint32_t indirectsymoff;
 *   uint32_t nindirectsyms;
 *   uint32_t extreloff;
 *   uint32_t nextrel;
 *   uint32_t locreloff;
 *   uint32_t nlocrel;
 * };
 *)
protocol DySymtabCommand;
def DySymtabCommand is LoadCommand;

def (this: DySymtabCommand).to_string -> "#<a DySymtabCommand>";

(*
 * struct dylinker_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 *   union lc_str name;
 * };
 *)
protocol DyLinkerCommand;
def DyLinkerCommand is LoadCommand;

def (this: DyLinkerCommand).to_string -> "#<a DyLinkerCommand: " + this.name + ">";

def (this: DyLinkerCommand).name_offset -> this.data.get_int32(8);

def (this: DyLinkerCommand).name -> this.data.get_c_string(this.name_offset);

(*
 * struct uuid_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 *   uint8_t uuid[16];
 * };
 *)
protocol UuidCommand;
def UuidCommand is LoadCommand;

def (this: UuidCommand).to_string -> "#<a UuidCommand>";

(*
 * struct thread_command {
 *   uint32_t cmd;
 *   uint32_t cmdsize;
 *   /* uint32_t flavor;*/
 *   /* uint32_t count; */
 *   /* struct cpu_thread_state state;*/
 * };
 *)
protocol ThreadCommand;
def ThreadCommand is LoadCommand;

def (this: ThreadCommand).to_string -> "#<a ThreadCommand>";

(*
 * struct dylib_command {
 *   uint_32 cmd;
 *   uint_32 cmdsize;
 *   struct dylib dylib;
 * };
 *
 * struct dylib {
 *   union lc_str  name;
 *   uint_32 timestamp;
 *   uint_32 current_version;
 *   uint_32 compatibility_version;
 * };
 *)
protocol DylibCommand;
def DylibCommand is LoadCommand;

def (this: DylibCommand).to_string -> "#<a DylibCommand: " + this.name + ">";

def (this: DylibCommand).name_offset -> this.data.get_int32(8);

def (this: DylibCommand).name -> this.data.get_c_string(this.name_offset);

def (this: DylibCommand).timestamp -> this.data.get_int32(12);

def (this: DylibCommand).current_version -> this.data.get_int32(16);

def (this: DylibCommand).compatibility_version -> this.data.get_int32(20);

protocol MachO;

def (this: MachO).print {
  for (def elm : this.load_commands)
    elm.print();
}

def (this: MachO).blobify {
  def stream := new BlobStream;
  this.write(stream);
  stream.get_blob();
}

def (this: MachO).sections -> fn for (fun) {
  for (def command : this.load_commands)
    for (def section : command.sections)
      fun(section);
};

def (this: MachO).write(out) {
  this.header.write(out);
  for (def load_command : this.load_commands)
    load_command.write(out);
  for (def section : this.sections)
    section.write(out);
}

def MachO.new(data) {
  def header := new MachHeader(data);
  def commands := new ArrayList(header.ncmds);
  ref cursor := 28;
  for (def i : 0 .. header.ncmds) {
    def command := new LoadCommand(data, new BlobView(data, cursor));
    cursor := cursor + command.cmdsize;
    commands[i] := command;
  }
  new MachO {
    data := data,
    header := header,
    load_commands := commands
  }
}
