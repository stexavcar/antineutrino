/**
 * Implementation of objects in the ELF format (Executable and
 * Linkable Format)
 * 
 * See the full specification in the System V Application Binary
 * Interface, http://www.sco.com/developers/devspecs/gabi41.pdf.
 */

protocol ElfFormat;

def ElfFormat.new() => new ElfFormat { };

def (this is ElfFormat).entry_point_name => "main";

def (this is ElfFormat).builder(binary) => new Elf(binary);

protocol Elf is ObjectFormat;

def Elf.new(binary) {
  def nil := new ElfNullSection();
  def text := new ElfTextSection();
  def strtab := new ElfStringTable();
  def symtab := new ElfSymbolTable(strtab);
  def reloc := new ElfRelocationSection();
  def bss := new ElfBssSection();
  def data := new ElfDataSection(".data");
  def rodata := new ElfDataSection(".rodata");
  def result := new Elf {
    binary := binary,
    layout := new Layouter(),
    strtab := strtab,
    text := text,
    symtab := symtab,
    reloc := reloc,
    sections := new ArrayList [ nil, text, reloc, data, rodata, bss, symtab, strtab ]
  }
  symtab.add_section_entry(result.section_index(text));
  symtab.add_section_entry(result.section_index(data));
  symtab.add_section_entry(result.section_index(rodata));
  symtab.add_section_entry(result.section_index(bss));
  result;
}

def (this is Elf).add_data_block(name, code);

def (this is Elf).calculate_layout() {
  def layout := this.layout;
  // Add the elf header as the root element
  def header_name := Elf.header_name;
  layout.add_section(header_name, null, Elf.header_size, 1);
  // Add the actual sections
  for (section : this.sections) {
    def name := section.name;
    layout.next_section(name, section.size, section.alignment);
  }
  // Add the section headers
  layout.next_section(Elf.section_header_start_name, 0, WORD_SIZE);
  for (section : this.sections) {
    def name := section.header_name;
    layout.next_section(name, ElfSection.header_size, WORD_SIZE);
  }
  layout.calculate();
}

def (this is Elf).section_index(section) {
  with_escape (return) {
    for (i : 0 .. this.sections.length) {
      if this.sections[i] = section
        then return(i);
    }
    null;
  }
}

def (this is Elf).encode(out) {
  this.encode_header(out);
  this.encode_sections(out);
  this.encode_section_headers(out);
}

/*
 * typedef struct Elf32_Ehdr {
 *   unsigned char e_ident[EI_NIDENT];
 *   Elf32_Half e_type;
 *   Elf32_Half e_machine;
 *   Elf32_Word e_version;
 *   Elf32_Addr e_entry;
 *   Elf32_Off e_phoff;
 *   Elf32_Off e_shoff;
 *   Elf32_Word e_flags;
 *   Elf32_Half e_ehsize;
 *   Elf32_Half e_phentsize;
 *   Elf32_Half e_phnum;
 *   Elf32_Half e_shentsize;
 *   Elf32_Half e_shnum;
 *   Elf32_Half e_shstrndx;
 * }
 */
def (this is Elf).encode_header(out) {
  def info := this.layout.info(Elf.header_name);
  this.encode_identification(out);
  out.write_int16(1); // ET_REL
  out.write_int16(3); // EM_386
  out.write_int32(1); // EV_CURRENT
  out.write_int32(0); // No entry point
  out.write_int32(0); // No header table
  def shdr_info := this.layout.info(Elf.section_header_start_name);
  out.write_int32(shdr_info.start); // Section header offset
  out.write_int32(0); // No flags
  out.write_int16(info.size); // Size of this header
  out.write_int16(0); // Size of program headers
  out.write_int16(0); // Number of program headers
  out.write_int16(ElfSection.header_size); // Size of section headers
  def nsect := this.sections.length;
  out.write_int16(nsect); // Number of section headers
  def strndx := this.section_index(this.strtab);
  out.write_int16(strndx); // Section header string table index
  assert_equal(info.end, out.length);
}

def (this is Elf).encode_identification(out) {
  out.write_int32(16r464C457F); // MAGIC
  out.write_int8(1); // ELFCLASS32
  out.write_int8(1); // ELFDATA2LSB
  out.write_int8(1); // VERSION
  out.pad_to(16);
}

def (this is Elf).encode_section_headers(out) {
  def start_info := this.layout.info(Elf.section_header_start_name);
  out.pad_to(start_info.start);
  for (section : this.sections) {
    def info := this.layout.info(section.header_name);
    assert_equal(info.start, out.length);
    this.encode_section_header(out, section);
    assert_equal(info.end, out.length);
  }
}

def (this is Elf).encode_sections(out) {
  for (section : this.sections) {
    def info := this.layout.info(section.name);
    assert_true(out.length <= info.start);
    out.pad_to(info.start);
    section.encode(out, this);
    assert_true(out.length <= info.end);
    out.pad_to(info.end);
  }
}

def Elf.header_size => 13 * WORD_SIZE;

def Elf.header_name => "Elf32_Ehdr";

def Elf.section_header_start_name => "Elf32_Shdr.start";

/*
 * typedef struct Elf32_Shdr {
 *   Elf32_Word sh_name;
 *   Elf32_Word sh_type;
 *   Elf32_Word sh_flags;
 *   Elf32_Addr sh_addr;
 *   Elf32_Off sh_offset;
 *   Elf32_Word sh_size;
 *   Elf32_Word sh_link;
 *   Elf32_Word sh_info;
 *   Elf32_Word sh_addralign;
 *   Elf32_Word sh_entsize;
 * }
 */
def (this is Elf).encode_section_header(out, section) {
  def name := section.name;
  def info := this.layout.info(name);
  def header_info := this.layout.info(section.header_name);
  assert_equal(header_info.start, out.length);
  out.write_int32(this.strtab[name]);
  out.write_int32(section.type);
  out.write_int32(section.flags); // flags
  out.write_int32(0); // addr
  out.write_int32(info.start);
  out.write_int32(info.size);
  out.write_int32(section.link(this)); // link
  out.write_int32(section.info(this));
  out.write_int32(section.alignment);
  out.write_int32(section.entry_size);
  assert_equal(header_info.end, out.length);
}

def (this is Elf).preprocess_relocation(relocation);

def (this is Elf).process_relocation(relocation) {
  def target_offset := this.symbol_address(relocation.target);
  def source_offset := this.symtab.code_block_offset(relocation.assm.name);
  def instr_offset := source_offset + relocation.offset;
  if relocation.is_relative then {
    this.text.rewrite_int32(instr_offset, target_offset - (instr_offset + 4));
  } else {
    this.text.rewrite_int32(instr_offset, target_offset);
  }
}

def (this is Elf).symbol_address(symbol) => 0;

def (this is Elf).symbol_address(symbol is LocalSymbol)
 => this.symtab.code_block_offset(symbol.name);

protocol ElfSection;

def (this is ElfSection).header_name => "${this.name}.header";

def (this is ElfSection).finalize(elf) {
  elf.strtab.ensure(this.name);
}

def ElfSection.header_size => 10 * WORD_SIZE;

def (this is ElfSection).entry_size => 0;

def (this is ElfSection).info(elf) => 0;

def (this is ElfSection).link(elf) => 0;

def (this is ElfSection).alignment => WORD_SIZE;

def (this is ElfSection).is_allocated => false;

def (this is ElfSection).is_writable => false;

def (this is ElfSection).is_executable => false;

def (this is ElfSection).flags
 => (if this.is_writable then 16r01 else 0)
  | (if this.is_allocated then 16r02 else 0)
  | (if this.is_executable then 16r04 else 0);

/**
 * The string table (ABI 4-21).  This is simply a sequence of
 * null-terminated C strings that is indexed by the byte offset of the
 * first character of the string you're interested in.
 */
protocol ElfStringTable is ElfSection;

def ElfStringTable.new() {
  def result := new ElfStringTable {
    table := new HashMap(),
    strings := new ArrayList(),
    r_size := new Ref(0)
  };
  result.ensure("");
  result;
}

def (this is ElfStringTable).alignment => 1;

def (this is ElfStringTable).size => this.r_size.get();

def (this is ElfStringTable).name => ".strtab";

def (this is ElfStringTable).type => 3; // SHT_STRTAB

def (this is ElfStringTable)[key]
 => this.table[key];

def (this is ElfStringTable).ensure(key) {
  def prev := this.table[key];
  if prev = null then {
    def index := this.size;
    this.table[key] := index;
    this.r_size.set(index + key.length + 1);
    this.strings.add(key);
    index;
  } else {
    prev;
  }
}

def (this is ElfStringTable).encode(out, elf) {
  def info := elf.layout.info(this.name);
  assert_equal(info.start, out.length);
  for (str : this.strings)
    out.write_c_string(str);
  assert_equal(info.end, out.length);
}

/**
 * This "section" is purely a header, it has no actual section data.
 * It is used as a marker of some sort -- stuff doesn't work without
 * it.
 */
protocol ElfNullSection is ElfSection;

def ElfNullSection.new() => new ElfNullSection { };

def (this is ElfNullSection).name => "";

def (this is ElfNullSection).size => 0;

def (this is ElfNullSection).type => 0; // SHT_NULL

def (this is ElfNullSection).alignment => 0;

def (this is ElfNullSection).encode(out, elf);

/**
 * Text section, containing executable code.  This is just a flat byte
 * array, the structure is derived from the symtab.
 */
protocol ElfTextSection is ElfSection;

def ElfTextSection.new() => new ElfTextSection {
  data := new BlobStream()
}

def (this is ElfTextSection).add_code(code) {
  def offset := this.data.length;
  this.data.write_data(code);
  offset;
}

def (this is ElfTextSection).rewrite_int32(offset, value) {
  this.data.rewrite_int32(offset, value);
}

def (this is ElfTextSection).name => ".text";

def (this is ElfTextSection).size => this.data.length;

def (this is ElfTextSection).type => 1; // SHT_PROGBITS

def (this is ElfTextSection).is_executable => true;

def (this is ElfTextSection).is_allocated => true;

def (this is ElfTextSection).encode(out, elf) {
  out.write_data(this.data.get_blob());
}

/**
 * Symbol table (ABI 4-22).
 */
protocol ElfSymbolTable is ElfSection;

def ElfSymbolTable.new(strtab) {
  def result := new ElfSymbolTable {
    strtab := strtab,
    entries := new ArrayList()  
  }
  result.entries.add(new ElfSymbolTableNullEntry());
  result;
}

def (this is ElfSymbolTable).add_local_code_entry(name, offset, size) {
  def name_index := this.strtab.ensure(name);
  def entry := new ElfSymbolTableEntry(name_index, offset, size);
  this.entries.add(entry);
}

def (this is ElfSymbolTable).add_section_entry(index) {
  this.entries.add(new ElfSymbolTableSectionEntry(index));
}

def (this is ElfSymbolTable).info(elf) => this.entries.length;

def (this is ElfSymbolTable).link(elf) => elf.section_index(elf.strtab);

def (this is ElfSymbolTable).type => 2; // SHT_SYMTAB

def (this is ElfSymbolTable).name => ".symtab";

def (this is ElfSymbolTable).size => this.entries.length * this.entry_size;

def (this is ElfSymbolTable).entry_size => ElfSymbolTableEntry.size;

def (this is ElfSymbolTable).encode(out, elf) {
  for (entry : this.entries)
    entry.encode(out, elf);
}

def (this is ElfSymbolTable).code_block_offset(name) {
  def name_index := this.strtab[name];
  with_escape (yield) {
    for (entry : this.entries) {
      if entry.name_index = name_index
        then yield(entry.offset);
    }
    null;
  }
}

/**
 * A single symbol table entry.  Corresponds to an Elf32_Sym as defined
 * in the ABI 4-22.
 */
protocol ElfSymbolTableEntry;

def ElfSymbolTableEntry.size => 4 * WORD_SIZE;

def ElfSymbolTableEntry.new(name_index, offset, size) => new ElfSymbolTableEntry {
  name_index := name_index,
  offset := offset,
  size := size
}

/**
 * struct Elf32_Sym {
 *   Elf32_Word st_name;
 *   Elf32_Addr st_value;
 *   Elf32_Word st_size; 
 *   unsigned char st_info;
 *   unsigned char st_other;
 *   Elf32_Half st_shndx;
 */
def (this is ElfSymbolTableEntry).encode(out, elf) {
  out.write_int32(this.name_index);
  out.write_int32(this.offset);
  out.write_int32(this.size);
  def type := 2; // STT_FUNC
  def bind := 1; // STB_GLOBAL
  out.write_int8((bind << 4) | type);
  out.write_int8(0);
  out.write_int16(1);
}

protocol ElfSymbolTableNullEntry is ElfSymbolTableEntry;

def ElfSymbolTableNullEntry.new() => new ElfSymbolTableNullEntry { }

def (this is ElfSymbolTableNullEntry).name_index => 0;

def (this is ElfSymbolTableNullEntry).encode(out, elf) {
  out.write_int32(this.name_index);
  out.write_int32(0);
  out.write_int32(0);
  out.write_int8(0);
  out.write_int8(0);
  out.write_int16(0);
}

protocol ElfSymbolTableSectionEntry is ElfSymbolTableEntry;

def ElfSymbolTableSectionEntry.new(index) => new ElfSymbolTableSectionEntry {
  index := index
}

def (this is ElfSymbolTableSectionEntry).name_index => 0;

def (this is ElfSymbolTableSectionEntry).encode(out, elf) {
  out.write_int32(this.name_index);
  out.write_int32(0);
  out.write_int32(0);
  out.write_int8(3); // STT_SECTION
  out.write_int8(0);
  out.write_int16(this.index);
}

/**
 * Relocation table (ABI 4-27).
 */
protocol ElfRelocationSection is ElfSection;

def ElfRelocationSection.new() => new ElfRelocationSection { }

def (this is ElfRelocationSection).name => ".rel.text";

def (this is ElfRelocationSection).size => 0;

def (this is ElfRelocationSection).entry_size => ElfRelocationEntry.size;

def (this is ElfRelocationSection).info(elf) => elf.section_index(elf.text);

def (this is ElfRelocationSection).link(elf) => elf.section_index(elf.symtab);

def (this is ElfRelocationSection).type => 9; // SHT_REL

def (this is ElfRelocationSection).encode(out, elf) {

}

protocol ElfRelocationEntry;

def ElfRelocationEntry.size => 2 * WORD_SIZE;

protocol ElfBssSection is ElfSection;

def ElfBssSection.new() => new ElfBssSection { }

def (this is ElfBssSection).name => ".bss";

def (this is ElfBssSection).type => 8; // SHT_NOBITS

def (this is ElfBssSection).size => 0;

def (this is ElfBssSection).is_writable => true;

def (this is ElfBssSection).is_allocated => true;

def (this is ElfBssSection).encode(out, elf);

protocol ElfDataSection is ElfSection;

def ElfDataSection.new(name) => new ElfDataSection { name := name }

def (this is ElfDataSection).type => 1; // SHT_PROGBITS

def (this is ElfDataSection).size => 0;

def (this is ElfDataSection).is_writable => true;

def (this is ElfDataSection).is_allocated => true;

def (this is ElfDataSection).encode(out, elf);
