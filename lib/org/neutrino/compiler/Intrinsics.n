protocol IntrinsicManager;

def IntrinsicManager.new() {
  def map := new HashMap();
  // Int32
  map["int32.cast"] := (fn (g, n) => g.int32_cast(n));
  map["add_int32"] := (fn (g, n) => g.add_int32(n));
  map["and_int32"] := (fn (g, n) => g.and_int32(n));
  map["sar_int32"] := (fn (g, n) => g.sar_int32(n));
  map["shl_int32"] := (fn (g, n) => g.shl_int32(n));
  map["eq_int32"] := (fn (g, n) => g.eq_int32(n));
  map["neq_int32"] := (fn (g, n) => g.neq_int32(n));
  // Strings
  map["char_ptr.cast"] := (fn (g, n) => g.cast_char_ptr(n));
  // Address
  map["read_int32"] := (fn (g, n) => g.read_int32(n));
  map["write_int32"] := (fn (g, n) => g.write_int32(n));
  map["static_data_ptr"] := (fn (g, n) => g.static_data_ptr(n));
  // Control
  map["if_else"] := (fn (g, n) => g.if_else(n));
  // Misc
  map["debug_interrupt"] := (fn (g, n) => g.debug_interrupt(n));
  new IntrinsicManager { handlers := map };
}

def (this is IntrinsicManager)[name] => this.handlers[name];

def (this is CodeGenerator).int32_cast(node) {
  def value := this.resolve_static_value(node.arguments[1]);
  // If we have a static integer value we just push it onto the stack as a
  // raw int32.
  this.assm.push(value);
}

def (this is CodeGenerator).cast_char_ptr(node) {
  def value := this.resolve_static_value(node.arguments[1]);
  this.assm.push(Symbol.string(value));
}

// Emits a binary int32 operation.  The given do_op thunk will
// be passed the source and destination registers and must emit the
// appropriate operations to perform the appropriate arithmetic and
// leave the result in the destination register.
def (this is CodeGenerator).int32_binary(node, do_op) {
  this.emit(node.arguments[0]);
  this.emit(node.arguments[1]);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  // Do the operation
  do_op(rEax, rEbx);
  // Push the result back onto the stack.
  this.assm.push(rEax);  
}

def (this is CodeGenerator).add_int32(node) {
  this.int32_binary(node, fn (dest, src) {
    this.assm.add(dest, src);
  });
}

def (this is CodeGenerator).and_int32(node) {
  this.int32_binary(node, fn (dest, src) {
    this.assm.ahnd(dest, src);
  });
}

// Emits an int32 shift operation.
def (this is CodeGenerator).int32_shift(node, do_op) {
  this.emit(node.arguments[0]);
  this.emit(node.arguments[1]);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEcx);
  this.assm.pop(rEax);
  // Do the operation
  do_op(rEax);
  // Push the result back onto the stack.
  this.assm.push(rEax);  
}

def (this is CodeGenerator).sar_int32(node) {
  this.int32_shift(node, fn (dest) {
    this.assm.sar(dest);
  });
}

def (this is CodeGenerator).shl_int32(node) {
  this.int32_shift(node, fn (dest) {
    this.assm.shl(dest);
  });
}

def kTrue := 16r01;
def kFalse := 16r00;

// Perform a comparison of two arguments.  The actual comparison must be
// performed by the given thunk which is given the register and operand
// to compare and a label to jump to if the comparison yields true.
def (this is CodeGenerator).compare_int32s(node, jump_if_set) {
  this.emit(node.arguments[0]);
  this.emit(node.arguments[1]);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  // Add the arguments
  def on_true := this.assm.label();
  def bottom := this.assm.label();
  jump_if_set(rEax, rEbx, on_true);
  this.assm.push(kFalse);
  this.assm.jmp(bottom);
  this.assm.bind(on_true);
  this.assm.push(kTrue);
  this.assm.bind(bottom);
}

def (this is CodeGenerator).eq_int32(node) {
  this.compare_int32s(node, fn (reg, oper, on_true) {
    this.assm.cmp(reg, oper);
    this.assm.je(on_true);
  });
}

def (this is CodeGenerator).neq_int32(node) {
  this.compare_int32s(node, fn (reg, oper, on_true) {
    this.assm.cmp(reg, oper);
    this.assm.jne(on_true);
  });
}

def (this is CodeGenerator).read_int32(node) {
  this.emit(node.arguments[0]);
  this.assm.pop(rEax);
  this.assm.push(Memory.at(rEax));
}

def (this is CodeGenerator).write_int32(node) {
  this.emit(node.arguments[0]);
  this.emit(node.arguments[1]);
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  this.assm.mov(Memory.at(rEbx), rEax);
  this.assm.push(rEax);
}

def (this is CodeGenerator).emit_thunk_body(node) {
  def method := with_escape (yield) {
    for (method in node.methods) {
      def name := method.signature[0].test.value;
      if name = "()"
        then yield(method);
    }
    null;
  }
  method.ensure_analyzed(this.universe);
  this.emit(method.body);
}

def (this is CodeGenerator).if_else(node) {
  this.emit(node.arguments[1]);
  def else_label := this.assm.label();
  def bottom := this.assm.label();
  this.assm.pop(rEax);
  this.assm.cmp(rEax, 0);
  this.assm.je(else_label);
  this.emit_thunk_body(node.arguments[2]);
  this.assm.jmp(bottom);
  this.assm.bind(else_label);
  this.emit_thunk_body(node.arguments[3]);  
  this.assm.bind(bottom);
}

def (this is CodeGenerator).static_data_ptr(node) {
  def value := this.resolve_static_value(node.arguments[1]);
  this.assm.mov(rEax, Symbol.local(value));
  this.assm.push(Memory.at(rEax));
}

def (this is CodeGenerator).debug_interrupt(node) {
  this.emit(node.arguments[0]);
  this.assm.int3();
}
