protocol IntrinsicManager;

def IntrinsicManager.new() {
  def map := new HashMap();
  // Int32
  map["int32.cast"] := (fn (g, n, c) -> g.int32_cast(n, c));
  map["add_int32"] := (fn (g, n, c) -> g.add_int32(n, c));
  map["and_int32"] := (fn (g, n, c) -> g.and_int32(n, c));
  map["sar_int32"] := (fn (g, n, c) -> g.sar_int32(n, c));
  map["eq_int32"] := (fn (g, n, c) -> g.eq_int32(n, c));
  map["neq_int32"] := (fn (g, n, c) -> g.neq_int32(n, c));
  // Strings
  map["char_ptr.cast"] := (fn (g, n, c) -> g.cast_char_ptr(n, c));
  // Address
  map["read_int32"] := (fn (g, n, c) -> g.read_int32(n, c));
  map["write_int32"] := (fn (g, n, c) -> g.write_int32(n, c));
  map["static_data_ptr"] := (fn (g, n, c) -> g.static_data_ptr(n, c));
  // Control
  map["if_else"] := (fn (g, n, c) -> g.if_else(n, c));
  // Misc
  map["debug_interrupt"] := (fn (g, n, c) -> g.debug_interrupt(n, c));
  new IntrinsicManager { handlers := map };
}

def (this is IntrinsicManager)[name] -> this.handlers[name];

def (this is CodeGenerator).int32_cast(guide, node) {
  def arg_node := guide.argument(node, 1);
  def arg_guide := guide.resolve(arg_node);
  def value := this.static_value(arg_guide, arg_node);
  // If we have a static integer value we just push it onto the stack as a
  // raw int32.
  this.assm.push(value);
}

def (this is CodeGenerator).cast_char_ptr(guide, node) {
  def arg_node := guide.argument(node, 1);
  def arg_guide := guide.resolve(arg_node);
  def value := this.static_value(arg_guide, arg_node);
  this.assm.push(Symbol.string(value));
}

// Emits a binary int32 operation.  The given do_op thunk will
// be passed the source and destination registers and must emit the
// appropriate operations to perform the appropriate arithmetic and
// leave the result in the destination register.
def (this is CodeGenerator).int32_binary(guide, node, do_op) {
  def left_node := guide.argument(node, 0);
  this.emit(guide.resolve(left_node), left_node);
  def right_node := guide.argument(node, 1);
  this.emit(guide.resolve(right_node), right_node);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  // Do the operation
  do_op(rEax, rEbx);
  // Push the result back onto the stack.
  this.assm.push(rEax);  
}

def (this is CodeGenerator).add_int32(guide, node) {
  this.int32_binary(guide, node, fn (dest, src) {
    this.assm.add(dest, src);
  });
}

def (this is CodeGenerator).and_int32(guide, node) {
  this.int32_binary(guide, node, fn (dest, src) {
    this.assm.ahnd(dest, src);
  });
}

// Emits an int32 shift operation.
def (this is CodeGenerator).int32_shift(guide, node, do_op) {
  def left_node := guide.argument(node, 0);
  this.emit(guide.resolve(left_node), left_node);
  def right_node := guide.argument(node, 1);
  this.emit(guide.resolve(right_node), right_node);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEcx);
  this.assm.pop(rEax);
  // Do the operation
  do_op(rEax);
  // Push the result back onto the stack.
  this.assm.push(rEax);  
}

def (this is CodeGenerator).sar_int32(guide, node) {
  this.int32_shift(guide, node, fn (dest) {
    this.assm.sar(dest);
  });
}

def kTrue := 16r01;
def kFalse := 16r00;

// Perform a comparison of two arguments.  The actual comparison must be
// performed by the given thunk which is given the register and operand
// to compare and a label to jump to if the comparison yields true.
def (this is CodeGenerator).compare_int32s(guide, node, jump_if_set) {
  def left_node := guide.argument(node, 0);
  this.emit(guide.resolve(left_node), left_node);
  def right_node := guide.argument(node, 1);
  this.emit(guide.resolve(right_node), right_node);
  // Push the arguments from the stack into two scratch registers.
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  // Add the arguments
  def on_true := this.assm.label();
  def bottom := this.assm.label();
  jump_if_set(rEax, rEbx, on_true);
  this.assm.push(kFalse);
  this.assm.jmp(bottom);
  this.assm.bind(on_true);
  this.assm.push(kTrue);
  this.assm.bind(bottom);
}

def (this is CodeGenerator).eq_int32(guide, node) {
  this.compare_int32s(guide, node, fn (reg, oper, on_true) {
    this.assm.cmp(reg, oper);
    this.assm.je(on_true);
  });
}

def (this is CodeGenerator).neq_int32(guide, node) {
  this.compare_int32s(guide, node, fn (reg, oper, on_true) {
    this.assm.cmp(reg, oper);
    this.assm.jne(on_true);
  });
}

def (this is CodeGenerator).read_int32(guide, node) {
  def addr_node := guide.argument(node, 0);
  this.emit(guide.resolve(addr_node), addr_node);
  this.assm.pop(rEax);
  this.assm.push(Memory.at(rEax));
}

def (this is CodeGenerator).write_int32(guide, node) {
  def addr_node := guide.argument(node, 0);
  this.emit(guide.resolve(addr_node), addr_node);
  def value_node := guide.argument(node, 1);
  this.emit(guide.resolve(value_node), value_node);
  this.assm.pop(rEax);
  this.assm.pop(rEbx);
  this.assm.mov(Memory.at(rEbx), rEax);
  this.assm.push(rEax);
}

def (this is CodeGenerator).emit_thunk_body(guide, node) {
  def proto := guide.proto(node);
  def method := this.universe.find_method("()", #[proto.id]);
  method.ensure_analyzed(this.universe);
  def syntax_tree := method.syntax_tree;
  def root_guide := syntax_tree.root_guide;
  def root_node := syntax_tree.root_node;
  this.emit(root_guide, root_node);
}

def (this is CodeGenerator).if_else(guide, node) {
  def cond_node := guide.argument(node, 1);
  this.emit(guide.resolve(cond_node), cond_node);
  def else_label := this.assm.label();
  def bottom := this.assm.label();
  this.assm.pop(rEax);
  this.assm.cmp(rEax, 0);
  this.assm.je(else_label);
  def then_node := guide.argument(node, 2);
  this.emit_thunk_body(guide.resolve(then_node), then_node);
  this.assm.jmp(bottom);
  this.assm.bind(else_label);
  def else_node := guide.argument(node, 3);
  this.emit_thunk_body(guide.resolve(else_node), else_node);  
  this.assm.bind(bottom);
}

def (this is CodeGenerator).static_data_ptr(guide, node) {
  def arg_node := guide.argument(node, 1);
  def arg_guide := guide.resolve(arg_node);
  def value := this.static_value(arg_guide, arg_node);
  this.assm.push(Symbol.local(value));
}

def (this is CodeGenerator).debug_interrupt(guide, node) {
  def recv_node := guide.argument(node, 0);
  this.emit(guide.resolve(recv_node), recv_node);
  this.assm.int3();
}
