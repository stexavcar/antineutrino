protocol Relocation;

def Relocation.new(assm, offset, target, is_relative) -> new Relocation {
  assm := assm,
  offset := offset,
  target := target,
  is_relative := is_relative
}

protocol Binary;

def Binary.new(arch) -> new Binary {
  arch := arch,
  entries := new ArrayList(),
  relocs := new ArrayList()
}

protocol CodeBlock;

def CodeBlock.new(name, code) -> new CodeBlock {
  name := name,
  code := code
}

def (this is Binary).add_relocation(reloc)
 -> this.relocs.add(reloc);

def (this is Binary).add_code_block(name) {
  def assm := this.arch.new_assembler(this, name);
  this.entries.add(new {
    name := name,
    assm := assm
  });
  assm;
}

def (this is Binary).encode {
  this.finalize();
  def out := new BlobStream;
  this.to_mach_o().encode(out);
  out.get_blob();
}

def (this is Binary).finalize() {
  for (entry : this.entries)
    entry.assm.finalize();
}

def (this is Binary).to_mach_o() {
  def result := new MachO(this);
  for (entry : this.entries)
    result.add_code_block(entry.name, entry.assm.code);
  result.finalize();
  result;
}
