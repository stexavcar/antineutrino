protocol Binary;

def Binary.new(arch) -> new Binary {
  arch := arch,
  entries := new ArrayList()
};

protocol CodeBlock;

def CodeBlock.new(name, code) -> new CodeBlock {
  name := name,
  code := code
};

def (this is Binary).add_code_block(name) {
  def assm := this.arch.new_assembler(this);
  this.entries.add(new {
    name := name,
    assm := assm
  });
  assm;
}

def (this is Binary).code_block_offset(name) {
  ref offset := 0;
  with_1cc return ->
    for (def entry : this.entries) {
      if name = entry.name then {
        return.fire(offset)
      } else {
        offset := offset + entry.assm.length
      }
    };
}

def (this is Binary).encode {
  this.finalize();
  def out := new BlobStream;
  this.to_mach_o().encode(out);
  out.get_blob();
}

def (this is Binary).finalize {
  for (def entry : this.entries)
    entry.assm.finalize();
}

def (this is Binary).to_mach_o() {
  def result := new MachO();
  def text := result.text;
  for (def entry : this.entries)
    result.add_code_block(entry.name, entry.assm.code);
  result;
}
