protocol PlainCodec;

def PlainCodec.new(type) -> new PlainCodec {
  type := type
}

def (this is PlainCodec).is_atomic -> false;

def (this is PlainCodec).new_instance()
 -> this.type.new_instance();

def (this is PlainCodec).initialize(obj, payload)
 -> obj.initialize(payload);

protocol GetterCodec;

def GetterCodec.new(name) -> new GetterCodec {
  name := name
}

def (this is GetterCodec).is_atomic -> true;

def (this is GetterCodec).new_atomic_instance(payload)
 -> payload[this.name];

protocol AtomicCodec;

def AtomicCodec.new(type) -> new AtomicCodec {
  type := type
}

def (this is AtomicCodec).is_atomic -> true;

def (this is AtomicCodec).new_atomic_instance(payload)
 -> this.type.new_instance(payload);

protocol NullCodec {

  def this.is_atomic -> true;

  def this.new_atomic_instance(payload) -> null;

}

def NullCodec.new() -> new NullCodec { }

def CompilerGrower.new_handler_table() {
  def result := new HashMap();
  result[CodeBundle.tag] := new PlainCodec(CodeBundle);
  result[Parameter.tag] := new PlainCodec(Parameter);
  result[TypeId.tag] := new AtomicCodec(TypeId);
  result[Binding.tag] := new PlainCodec(Binding);
  result[Annotation.tag] := new PlainCodec(Annotation);
  result[Module.tag] := new PlainCodec(Module);
  result[Native.tag] := new PlainCodec(Native);
  result[Universe.tag] := new PlainCodec(Universe);
  result[ProtocolAst.tag] := new PlainCodec(ProtocolAst);
  result[MethodAst.tag] := new PlainCodec(MethodAst);
  result[FieldKey.tag] := new PlainCodec(FieldKey);
  result["org.javatrino.ast.Expression$Call$Argument"] := new NullCodec();
  result["org.javatrino.ast.Symbol"] := new NullCodec();
  result["org.javatrino.ast.Expression$GetField"] := new NullCodec();
  result["org.javatrino.ast.Expression$SetField"] := new NullCodec();
  result["org.javatrino.ast.Expression$Block"] := new NullCodec();
  result["org.javatrino.ast.Expression$Call"] := new NullCodec();
  result["org.javatrino.ast.Expression$NewObject"] := new NullCodec();
  result["org.javatrino.ast.Expression$Constant"] := new NullCodec();
  result["org.javatrino.ast.Expression$Local"] := new NullCodec();
  result["org.javatrino.ast.Expression$Global"] := new NullCodec();
  result["org.javatrino.ast.Expression$TagWithProtocol"] := new NullCodec();
  result["org.javatrino.ast.Expression$AddIntrinsics"] := new NullCodec();
  result["org.javatrino.ast.Expression$Definition"] := new NullCodec();
  result["org.neutrino.runtime.RInteger"] := new GetterCodec("value");
  result["org.neutrino.runtime.RString"] := new GetterCodec("value");
  result;
}

protocol CodeBundle;

def CodeBundle.tag -> "org.neutrino.pib.CodeBundle";

def CodeBundle.new_instance() -> new CodeBundle {
  literals := null,
  local_count := null,
  filename := null,
  code := null,
  root_offset := null,
  body := null
}

def (this is CodeBundle).initialize(payload) {
  this.literals := payload["oldLiterals"];
  this.local_count := payload["localCount"];
  this.filename := payload["fileName"];
  this.code := payload["oldCode"];
  this.root_offset := payload["rootOffset"];
  this.body := payload["body"];
}

protocol Parameter;

def Parameter.tag -> "org.neutrino.pib.Parameter";

def Parameter.new_instance() -> new Parameter {
  type := null,
  name := null,
  is_protocol := null
}

def (this is Parameter).initialize(payload) {
  this.type := payload["type"];
  this.name := payload["name"];
  this.is_protocol := payload["isProtocolMethod"];
}

protocol MethodAst;

def MethodAst.tag -> "org.neutrino.runtime.RMethod";

def MethodAst.new_instance() -> new MethodAst {
  annots := null,
  params := null,
  name := null,
  code := null,
  syntax_tree := null,
  has_been_analyzed := false
}

def (this is MethodAst).initialize(payload) {
  this.annots := payload["annots"];
  this.params := payload["params"];
  this.name := payload["name"];
  this.code := payload["code"];
  this.syntax_tree := new SyntaxTree(payload["code"]);
}

def (this is MethodAst).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annots) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

def (this is MethodAst).ensure_analyzed(universe) {
  if not this.has_been_analyzed then {
    new TypeAnalysis(universe, this).analyze(this.syntax_tree);
    this.has_been_analyzed := true;
  }
}

def (this is MethodAst).to_string() -> "#<a Method: ${this.name}>";

protocol TypeId;

def TypeId.tag -> "org.neutrino.runtime.TypeId";

def TypeId.new_instance(payload) -> null;

protocol ProtocolAst;

def ProtocolAst.tag -> "org.neutrino.runtime.RProtocol";

def ProtocolAst.new_instance() -> new ProtocolAst {
  instance_type_id := null,
  protocol_type_id := null,
  id := null,
  annotations := null,
  display_name := null
}

def (this is ProtocolAst).initialize(payload) {
  this.instance_type_id := payload["instanceTypeId"];
  this.protocol_type_id := payload["protocolTypeId"];
  this.id := payload["id"];
  this.annotations := payload["annotations"];
  this.display_name := payload["displayName"];
}

def (this is ProtocolAst).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annotations) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

protocol Binding;

def Binding.tag -> "org.neutrino.pib.Binding";

def Binding.new_instance() -> new Binding {
  annotations := null,
  code := null
}

def (this is Binding).initialize(payload) {
  this.annotations := payload["annotations"];
  this.code := payload["code"];
}

def (this is Binding).get_annotation(name) {
  with_1cc (yield) {
    for (annot : this.annotations) {
      if annot.tag = name
        then yield(annot);
    }
    null;
  }
}

protocol Annotation;

def Annotation.tag -> "org.neutrino.syntax.Annotation";

def Annotation.new_instance() -> new Annotation {
  tag := null,
  args := null
}

def (this is Annotation).initialize(payload) {
  this.tag := payload["tag"];
  this.args := payload["args"];
}

def (this is Annotation)[index] -> this.args[index];

protocol Module;

def Module.tag -> "org.neutrino.pib.Module";

def Module.new_instance() -> new Module {
  defs := null,
  protos := null,
  supers := null,
  methods := null
}

def (this is Module).initialize(payload) {
  this.defs := payload["defs"];
  this.protos := payload["protos"];
  this.supers := payload["rawInheritance"];
  this.methods := payload["methods"];
}

def (this is Module).to_string()
 -> "#<a Module: defs=${this.defs}, protos=${this.protos}, supers=${this.supers}, methods=${this.methods}>";

protocol Native;

def Native.tag -> "org.neutrino.runtime.Native";

def Native.grow(payload) -> new Native {
  name := payload["name"]
}

protocol FieldKey;

def FieldKey.tag -> "org.neutrino.runtime.RFieldKey";

def FieldKey.new_instance() -> new FieldKey { }

def (this is FieldKey).initialize(payload) -> null;

protocol Universe;

def Universe.tag -> "org.neutrino.pib.Universe";

def Universe.new_instance() -> new Universe {
  modules := null,
  global_cache := new HashMap(),
  super_cache := new HashMap()
}

def (this is Universe).initialize(payload) {
  this.modules := payload["modules"];
}

def (this is Universe).modules -> this.r_modules.get();

def (this is Universe).bindings -> fn for (fun) {
  for (module : this.modules.values)
    module.defs.for(fun);
}

def (this is Universe).methods -> fn for (fun) {
  for (module : this.modules.values)
    module.methods.for(fun);
}

def (this is Universe).protocols -> fn for (fun) {
  for (module : this.modules.values)
    module.protos.for(fun);
}

def (this is Universe).supers -> fn for (fun) {
  for (module : this.modules.values)
    module.supers.for(fun);
}

def (this is Universe).supers(name) {
  def cached := this.super_cache[name];
  if cached = null then {
    def result := new ArrayList();
    for (found_name, found_supers : this.supers) {
      if found_name = name then {
        for (super : found_supers)
          result.add(super);
      }
    }
    this.super_cache[name] := result;
  } else {
    cached;
  }
}

def (this is Universe).lookup_static_global(name) {
  def cached := this.global_cache[name];
  if cached = null then {
    with_1cc (return) {
      for (proto_name, proto : this.protocols) {
        if name = proto_name then {
          this.global_cache[name] := proto;
          return(proto);
        }
      }
      null;
    }
  } else {
    cached;
  }
}

def (this is Universe).to_string() -> "#<a Universe: ${this.modules}>";
