def CompilerGrower.new_handler_table() {
  def result := new HashMap();
  result[CodeBundle.tag] := (fn (payload) -> CodeBundle.grow(payload));
  result[Parameter.tag] := (fn (payload) -> Parameter.grow(payload));
  result[Method.tag] := (fn (payload) -> Method.grow(payload));
  result[TypeId.tag] := (fn (payload) -> TypeId.grow(payload));
  result[Binding.tag] := (fn (payload) -> Binding.grow(payload));
  result[Annotation.tag] := (fn (payload) -> Annotation.grow(payload));
  result[Module.tag] := (fn (payload) -> Module.grow(payload));
  result[Native.tag] := (fn (payload) -> Native.grow(payload));
  result[Universe.tag] := (fn (payload) -> Universe.grow(payload));
  def getter(name) -> fn (payload) -> payload[name];
  result[Protocol.tag] := id;
  result["org::neutrino::runtime::RInteger"] := getter("value");
  result["org::neutrino::runtime::RString"] := getter("value");
  result;
}

protocol CodeBundle;

def CodeBundle.tag -> "org::neutrino::pib::CodeBundle";

def CodeBundle.grow(payload) -> new CodeBundle {
  literals := payload["literals"],
  local_count := payload["localCount"],
  filename := payload["fileName"],
  code := payload["code"]
}

protocol Parameter;

def Parameter.tag -> "org::neutrino::pib::Parameter";

def Parameter.grow(payload) -> new Parameter {
  type := payload["type"],
  name := payload["name"],
  is_protocol_method := payload["isProtocolMethod"]
}

protocol Method;

def Method.tag -> "org::neutrino::runtime::RMethod";

def Method.grow(payload) -> null;

protocol TypeId;

def TypeId.tag -> "org::neutrino::runtime::TypeId";

def TypeId.grow(payload) -> null;

protocol Protocol;

def Protocol.tag -> "org::neutrino::runtime::RProtocol";

protocol Binding;

def Binding.tag -> "org::neutrino::pib::Binding";

def Binding.grow(payload) -> new Binding {
  annotations := payload["annotations"],
  code := payload["code"]
}

protocol Annotation;

def Annotation.tag -> "org::neutrino::syntax::Annotation";

def Annotation.grow(payload) -> new Annotation {
  tag := payload["tag"],
  args := payload["args"]
}

protocol Module;

def Module.tag -> "org::neutrino::pib::Module";

def Module.grow(payload) -> new Module {
  defs := payload["defs"],
  protos := payload["protos"],
  supers := payload["rawInheritance"],
  methods := payload["methods"]
}

def (this is Module).to_string()
 -> "#<a Module: defs=${this.defs}, protos=${this.protos}, supers=${this.supers}, methods=${this.methods}>";

protocol Native;

def Native.tag -> "org::neutrino::runtime::Native";

def Native.grow(payload) -> new Native {
  name := payload["name"]
}

protocol Universe;

def Universe.tag -> "org::neutrino::pib::Universe";

def Universe.grow(payload) -> new Universe {
  modules := payload["modules"]
}

def (this is Universe).to_string() -> "#<a Universe: ${this.modules}>";
