protocol NeutrinoCompiler;

def NeutrinoCompiler.new() -> new NeutrinoCompiler { };

@entry_point("compile")
def compiler_entry_point(args) {
  def in_name := args[0];
  def out_name := args[1];
  new NeutrinoCompiler().compile(in_name, out_name);
}

def (this is NeutrinoCompiler).add_dylib_bridge(binary, name, argc) {
  def bridge := binary.add_code_block(name);
  bridge.enter_frame();
  bridge.mov(rEax, deref(rEsp));
  bridge.call(CallTarget.extern("_" + name));
  bridge.exit_frame();  
}

def (this is NeutrinoCompiler).build_binary() {
  def binary := new Binary(new Ia386());

  // Make external call bridges.
  this.add_dylib_bridge(binary, "exit", 1);
  this.add_dylib_bridge(binary, "putchar", 1);

  // Main function which calls the entry point and then exits.  This
  // function is called by the system and so must use native calling
  // conventions.
  def main := binary.add_code_block("_main");
  main.enter_frame();
  main.call(CallTarget.local("entry_point"));
  main.mov(0, rEax);
  main.call(CallTarget.local("exit"));
  main.exit_frame();

  // Neutrino entry point.  Called from neutrino.
  def entry_point := binary.add_code_block("entry_point");
  entry_point.enter_frame();
  entry_point.call(CallTarget.local("hello"));
  entry_point.exit_frame();

  // Utility function that prints a message.  
  def hello := binary.add_code_block("hello");
  def puts(s) {
    for (c : s.ascii_characters) {
      hello.mov(c, rEax);
      hello.call(CallTarget.local("putchar"));
    }
  }
  hello.enter_frame();
  puts("Hello World!\n");
  hello.exit_frame();
  binary;
}

protocol CompilerGrower;

def CompilerGrower.new() -> new CompilerGrower {
  handler_table := CompilerGrower.new_handler_table()
}

def (this is CompilerGrower).grow(tag, payload) {
  def handler := this.handler_table[tag];
  if handler = null then
    fail("Don't know how to grow a ${tag}.");
  handler(payload);
}

def (this is NeutrinoCompiler).read_universe(filename) {
  def raw_data := open_file(filename).read_binary();
  new Plankton(raw_data, new CompilerGrower()).unmarshal();
}

def (this is NeutrinoCompiler).compile(in_name, out_name) {
  def universe := this.read_universe(in_name);
  print(universe);
  def binary := this.build_binary();
  def data := binary.encode;
  open_file(out_name).write_binary(data);  
}
