protocol TypeAnalysis;

def TypeAnalysis.new(universe, method) -> new TypeAnalysis {
  universe := universe,
  method := method,
  scope_chain := null
}

protocol ScopeChainLink;

def (this is TypeAnalysis).push_local_scope(guide, node) {
  def prev := this.scope_chain;
  def next := new ScopeChainLink {
    guide := guide,
    node := node,
    prev := prev
  }
  this.scope_chain := next;
}

def (this is TypeAnalysis).pop_local_scope() {
  this.scope_chain := this.scope_chain.prev;
}

def (this is TypeAnalysis).local_type(index) {
  ref current := this.scope_chain;
  with_escape (yield) -> Control.repeat(fn () {
    if current = null
      then yield(null);
    if current.guide.index(current.node) = index then {
      def value := current.guide.value(current.node);
      yield(current.guide.info(value).type);
    } else {
      current := current.prev;
    }
  });
}

def (this is TypeAnalysis).analyze(tree)
 -> this.analyze(tree.root_guide, tree.root_node);

def (this is TypeAnalysis).analyze(guide, node) {
  def type := this.do_analyze(guide, node);
  if type != null then
    guide.ensure_info(node).type := type;
  type;
}

def (this is Universe).is_static_subtype(expected, found) {
  if expected = found then {
    true;
  } else {
    def proto := this.lookup_static_global(found);
    def check_supers := proto != null and proto.get_annotation("no_override") != null;
    if check_supers then {
      with_escape (yield) {
        for (super : this.supers(found)) {
          if this.is_static_subtype(expected, super)
            then yield(true);
        }
        false;
      }
    } else {
      false;
    }
  }
}

def (this is Universe).is_matching_argument(param, type_found) {
  if param.is_protocol
    then type_found = "${param.type}.protocol";
    else this.is_static_subtype(param.type, type_found);
}

def (this is Universe).find_method(name, types) {
  with_escape (return) {
    for (method : this.methods) {
      if method.name = name then {
        def params := method.params;
        if params.length = types.length then {
          with_escape (break) {
            for (i : 0 .. params.length) {
              if not this.is_matching_argument(params[i], types[i])
                then break(null);
            }
            return(method);
          }
        }
      }
    }
    null;
  }
}

def (this is TypeAnalysis).do_analyze(guide is CallGuide, node) {
  def types := new ArrayList();
  for (arg_guide, arg_node : guide.arguments(node)) {
    def type := this.analyze(arg_guide, arg_node);
    types.add(type);
  }
  def method := this.universe.find_method(guide.name(node), types);
  if method != null then {
    if method.get_annotation("inline") != null then {
      def intrinsic := method.get_annotation("intrinsic");
      guide.ensure_info(node).intrinsic := intrinsic[0];
    }
    guide.ensure_info(node).c_call := method;
    def annot := method.get_annotation("type");
    if annot != null
      then annot[0];
  }
}

def (this is TypeAnalysis).do_analyze(guide is LiteralGuide, node)
 -> this.value_type(guide.value(node));

def (this is TypeAnalysis).do_analyze(guide is GlobalGuide, node) {
  def name := guide.name(node);
  def value := this.universe.lookup_static_global(name);
  if value = null
    then null;
    else this.value_type(value);
}

def (this is TypeAnalysis).do_analyze(guide is LocalGuide, node)
 -> this.local_type(guide.index(node));

def (this is TypeAnalysis).do_analyze(guide is BlockGuide, node) {
  ref last := null;
  for (elm_guide, elm_node : guide.elements(node))
    last := this.analyze(elm_guide, elm_node);
  last;
}

def (this is TypeAnalysis).do_analyze(guide is LocalDefGuide, node) {
  def value := guide.value(node);
  this.analyze(guide.resolve(value), value);
  this.push_local_scope(guide, node);
  def body := guide.body(node);
  def result := this.analyze(guide.resolve(body), body);
  this.pop_local_scope();
  result;
}

def (this is TypeAnalysis).do_analyze(guide is NewGuide, node)
 -> "Object";

def (this is TypeAnalysis).do_analyze(guide is ArgumentGuide, node) {
  def index := guide.index(node);
  def params := this.method.params;
  def argc := params.length;
  def param := params[argc - index];
  def type := param.type;
  def value := this.universe.lookup_static_global(type);
  // For types that don't allow overriding we're safe to assume that the
  // concrete type of an argument is that class, since for any method we
  // might call directly as a consequence will not have been overridden and
  // so will be correct.
  if value != null and value.get_annotation("no_override") != null
    then type;
    else null;
}

def (this is TypeAnalysis).value_type(obj is Integer) -> "Integer";

def (this is TypeAnalysis).value_type(obj is String) -> "String";

def (this is TypeAnalysis).value_type(obj is ProtocolAst)
 -> "${obj.id}.protocol";

def (this is TypeAnalysis).value_type(obj) -> null;
