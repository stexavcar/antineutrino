// Sums 1..n
def sum(n) -> if n = 1 then 1 else n + sum(n-1);

// Sums 1..n with a loop
def isum(n) {
  ref n := n;
  ref s := 0;
  with_1cc break -> Control.repeat(fn() {
    if n < 1 then {
      break(null);
    } else {
      s := s + n;
      n := n - 1;
    }
  });
  s.get();
}

// Sums the first n cubes
def sumcubes(n) -> if n = 1 then 1 else cube(n) + sumcubes(n-1);

// Cubes a number
def cube(n) -> n * n * n;

// Calculates the nth fibbonacci number (naiive recursion)
def fib(n) -> 
  if n = 1 then 1
  else if n = 2 then 1
  else fib(n-1) + fib(n-2);

// Calculates nth fibbonacci number (smarter recursion)
// NOTE: this one doesn't work yet
def fastfib(n) {
  def f := fn(f1, f2, n) ->
    if n = 1 then f2
    else f(f2, f1+f2, n-1);
  f(0, 1, n);
}

// Calculates the nth fibbonacci number with a loop
def ifib(n) {
  ref n := n - 1;
  ref s1 := 0;
  ref s2 := 1;
  with_1cc break -> Control.repeat(fn() {
    if n < 1 then {
      break(null);
    } else {
      def tmp := s1 + s2;
      s1 := s2;
      s2 := tmp;
      n := n - 1;
    }
  });
  s2;
}
