def (this is CompilerTest).test_layouter() {
  this.test_simple_layout();
  this.test_cascade_layout();
  this.test_zero_layout();
}

def (this is CompilerTest).test_simple_layout() {
  this.on_start("simple layout");
  def layout := new Layouter();
  layout.add_section("header", null, 10, 16);
  layout.add_section("footer", "header", 10, 16);
  layout.calculate();
  def header_info := layout.info("header");
  def footer_info := layout.info("footer");
  assert_equal(0, header_info.start);
  assert_equal(16, header_info.size);
  assert_equal(16, footer_info.start);
  assert_equal(16, footer_info.size);
}

def (this is CompilerTest).test_cascade_layout() {
  this.on_start("cascade layout");
  def layout := new Layouter();
  layout.add_section("s0", null, 1, 64);
  for (i : 16 .. 0)
    layout.add_section("s${i}", "s${i-1}", 1, 64);
  layout.calculate();
  for (i : 0 .. 17) {
    def info := layout.info("s${i}");
    assert_equal(i * 64, info.start);
    assert_equal(64, info.size);
  }
}

def (this is CompilerTest).test_zero_layout() {
  this.on_start("zero layout");
  def layout := new Layouter();
  layout.add_section(0, null, 0, 16);
  layout.add_section(1, null, 0, 16);
  layout.add_section(2, null, 0, 16);  
  layout.calculate();
  assert_equal(0, layout.info(0).start);
  assert_equal(0, layout.info(0).size);
  assert_equal(0, layout.info(1).start);
  assert_equal(0, layout.info(1).size);
  assert_equal(0, layout.info(2).start);
  assert_equal(0, layout.info(2).size);
}
