def (this is UtilsTest).test_hash_maps() {
  this.test_simple_hash_maps();
  this.test_large_hash_maps();
  this.test_hash_map_initialization();
}

def (this is UtilsTest).test_simple_hash_maps() {
  this.on_start("simple hash maps");
  def map := new HashMap();
  assert_equal(0, map.size);
  assert_equal(null, map["a"]);
  assert_equal(null, map["b"]);
  map["a"] := 4;
  assert_equal(1, map.size);
  map["b"] := 5;
  assert_equal(2, map.size);
  assert_equal(4, map["a"]);
  assert_equal(5, map["b"]);
  map["a"] := 7;
  assert_equal(2, map.size);
  assert_equal(7, map["a"]);
  assert_equal(5, map["b"]);
}

def (this is UtilsTest).test_large_hash_maps() {
  this.on_start("large hash maps");
  def map := new HashMap();
  for (def i : 0 .. 256) {
    if (i % 5) != 3 then
      map[i] := i.to_string;
  }
  for (def i : 0 .. 256) {
    def expected := if (i % 5) != 3 then i.to_string else null;
    assert_equal(expected, map[i]);
  }
}

def (this is UtilsTest).test_hash_map_initialization() {
  this.on_start("hash map initialization");
  def map := new HashMap() [ 2, 4, 6 ];
  assert_equal(2, map[0]);
  assert_equal(4, map[1]);
  assert_equal(6, map[2]);
  assert_equal(null, map[3]);
}
