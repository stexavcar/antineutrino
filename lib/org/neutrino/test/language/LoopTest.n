def LanguageTest::test_loops() {
  this.test_raw_loops();
  this.test_intervals();
}

def LanguageTest::test_raw_loops() {
  this.on_start("raw loops");
  def i := new_ref(0);
  def x := with_1cc break -> loop(fn () {
    if i.get() = 10 then {
      break.fire("k")
    } else {
      i.set(i.get() + 1);
    }
  });
  assert_equal(10, i.get());
  assert_equal("k", x);
  def y := with_1cc break -> 5;
  assert_equal(5, y);
}

def LanguageTest::test_intervals() {
  this.on_start("intervals");
  ref expected := 0;
  def r := (0 .. 10).for_each(fn (i) {
    assert_equal(i, expected);
    expected := i + 1;
  });
  assert_equal(10, expected);
  assert_equal(0 .. 10, r);
}
