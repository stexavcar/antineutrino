(*
 * Signed integers 
 *)
@native("int") protocol Integer;

def Integer::+(that: Integer) -> internal "int+int";

def Integer::-(that: Integer) -> internal "int-int";

def Integer::*(that: Integer) -> internal "int*int";

def Integer::<(that: Integer) -> internal "int<int";

def Integer::>=(that: Integer) -> not (this < that);

def Integer::>(that: Integer) -> not (this < that or this = that);

def Integer::=(that: Integer) -> internal "int=int";

def Integer::|(that: Integer) -> internal "int|int";

def Integer::&(that: Integer) -> internal "int&int";

def Integer::<<(that: Integer) -> internal "int<<int";

def Integer::>>(that: Integer) -> internal "int>>int";

def Integer::..(that) -> new Interval {
  from := this,
  to := that,
  dir := if this < that then 1 else 0-1
};

protocol Interval;
def Interval is Sequence;

def Interval::=(other : Interval) -> this.from = other.from and this.to = other.to;

def Interval::iter {
  ref i := this.from;
  new Iter {
    has_next -> not i = this.to,
    next -> { def ret := i; i:= i + this.dir; ret }
  };
}
