/*
 * Signed integers 
 */
@native("int") protocol Integer;

def (this: Integer)+(that: Integer) -> internal "int+int";

def (this: Integer)-(that: Integer) -> internal "int-int";

def (this: Integer)*(that: Integer) -> internal "int*int";

def (this: Integer)%(that: Integer) -> internal "int%int";

def (this: Integer)<(that: Integer) -> internal "int<int";

def (this: Integer)>=(that: Integer) -> not (this < that);

def (this: Integer)>(that: Integer) -> not (this < that or this = that);

def (this: Integer)=(that: Integer) -> internal "int=int";

def (this: Integer)|(that: Integer) -> internal "int|int";

def (this: Integer)&(that: Integer) -> internal "int&int";

def (this: Integer)<<(that: Integer) -> internal "int<<int";

def (this: Integer)>>(that: Integer) -> internal "int>>int";

def (this: Integer)..(that) -> new Interval {
  from := this,
  to := that,
  dir := if this < that then 1 else 0-1
};

protocol Interval is Sequence;

def (this: Interval)=(other : Interval) -> this.from = other.from and this.to = other.to;

def (this: Interval).iter {
  ref i := this.from;
  new Iter {
    has_next -> not i = this.to,
    next -> { def ret := i; i:= i + this.dir; ret }
  };
}
