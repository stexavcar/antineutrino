@native("array") protocol PrimitiveArray;
def PrimitiveArray is Sequence;

def PrimitiveArray::[index: Integer] -> internal "array[]";

def PrimitiveArray::length -> internal "array.length";

def PrimitiveArray::iter {
  def self := this;
  def index_itr := (0 .. this.length).iter;
  new Iter {
    has_next -> index_itr.has_next,
    next -> self[index_itr.next]
  };
}

def PrimitiveArray::[slice: Interval] {
  def a := new MutablePrimitiveArray(Math.abs(slice.to - slice.from));
  ref i := 0;
  slice.for_each(fn (idx) { a[i] := this[idx]; i := i + 1 });
  a;
}

@native("mutarr") protocol MutablePrimitiveArray;
def MutablePrimitiveArray is PrimitiveArray;

def protocol MutablePrimitiveArray::new(size: Integer) -> internal "mutprimarr";

def MutablePrimitiveArray::[i: Integer]:=(value) -> internal "mutarr.set";

@native("byte_array") protocol ByteArray;

def ByteArray::[index: Integer] -> internal "byte_array[]";

def ByteArray::length -> internal "byte_array.length";

@native("mutbytarr") protocol MutablePrimitiveByteArray;

def protocol MutablePrimitiveByteArray::new(size: Integer) -> internal "mutprimbytarr";
