@native("array") protocol PrimitiveArray is Sequence;

def (this: PrimitiveArray)[index: Integer] -> internal "array[]";

def (this: PrimitiveArray).length -> internal "array.length";

def (this: PrimitiveArray).iter {
  def self := this;
  def index_itr := (0 .. this.length).iter;
  new Iter {
    has_next -> index_itr.has_next,
    next -> self[index_itr.next]
  };
}

def (this: PrimitiveArray)[slice: Interval] {
  def a := new MutablePrimitiveArray(Math.abs(slice.to - slice.from));
  ref i := 0;
  for (def idx : slice) {
    a[i] := this[idx];
    i := i + 1;
  }
  a;
}

@native("mutarr") protocol MutablePrimitiveArray is PrimitiveArray;

def MutablePrimitiveArray.new(size: Integer) -> internal "mutprimarr";

def (this: MutablePrimitiveArray)[i: Integer]:=(value) -> internal "mutarr.set";

@native("byte_array") protocol ByteArray;

def (this: ByteArray)[index: Integer] -> internal "byte_array[]";

def (this: ByteArray).length -> internal "byte_array.length";

@native("mutbytarr") protocol MutablePrimitiveByteArray is ByteArray;

def MutablePrimitiveByteArray.new(size: Integer) -> internal "mutprimbytarr";

def (this: MutablePrimitiveByteArray)[i: Integer]:=(value: Integer) -> internal "mutbytarr.set";

