
protocol ArrayList is Sequence {

  @static def proto.new() => new ArrayList(0);

  @static def proto.new(size is Integer) => new ArrayList {
    contents := new PrimitiveArray(size),
    length := size
  };

  @static def proto.new(elms is PrimitiveArray) {
    def result := new ArrayList(elms.length);
    for (i : 0 .. elms.length)
      result[i] := elms[i];
    result;
  }

  @static def proto.new(seq is Sequence) {
    def result := new ArrayList(0);
    for (elm : seq)
      result.add(elm);
    result;
  }

  def this[i] => this.contents[i];

  def this[i]:=(value) => this.contents[i] := value;

  def this.to_string() {
    def out := new StringStream();
    out.add("[");
    ref first := true;
    for (el : this) {
      if first then first := false;
      else out.add(", ");
      out.add(el);
    }
    out.add("]");
    out.to_string();
  }

  def this.remove_last() {
    def new_length := this.length - 1;
    def result := this.contents[new_length];
    this.length := new_length;
    result;
  }

  def this=(that is ArrayList) {
    if this.length != that.length then {
      false;
    } else {
      with_escape (return) {
        for (i : 0 .. this.length) {
          if this[i] != that[i] then
            return(false);
        }
        true;
      }
    }
  }

  def this+(that is ArrayList) {
    def result := new ArrayList(this.length + that.length);
    for (i : 0 .. this.length)
      result[i] := this[i];
    for (i : 0 .. that.length)
      result[this.length + i] := that[i];
    result;
  }

  def this.add(value) {
    def new_length := this.length + 1;
    this.ensure_capacity(new_length);
    this.contents[this.length] := value;
    this.length := new_length;
    value;
  }

  def this.ensure_capacity(capacity) {
    def old_contents := this.contents;
    if not capacity < old_contents.length then {
      def new_contents := new PrimitiveArray(capacity * 2);
      for (i : 0 .. this.length)
        new_contents[i] := old_contents[i];
      this.contents := new_contents;
    }
  }

  def this.for(fun) {
    for (i : 0 .. this.length)
      fun(this[i]);
  }

  def this.join(sep)
   => String.implode(this.contents, this.length, sep);

}
