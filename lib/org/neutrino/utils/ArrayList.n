protocol ArrayList;
def ArrayList is Sequence;

def protocol ArrayList::new(size: Integer) -> new ArrayList {
  contents_ := new_ref(new MutablePrimitiveArray(size)),
  length_ := new_ref(size)
};

def protocol ArrayList::new(elms: PrimitiveArray) {
  def result := new ArrayList(elms.length);
  (0 .. elms.length).for_each(fn (i) -> result[i] := elms[i]);
  result;
}

def protocol ArrayList::new(seq: Sequence) {
  def result := new ArrayList(0);
  seq.for_each(fn (elm) -> result.add(elm));
  result;
}

def ArrayList::[i: Integer] -> this.contents[i];

def ArrayList::length -> this.length_.get();

def ArrayList::contents -> this.contents_.get();

def ArrayList::[i: Integer]:=(value) -> this.contents[i] := value;

def ArrayList::to_string() {
  ref s := "<an ArrayList: [";
  this.for_each(fn (el) -> s := s + el.to_string + ", ");
  s := s + "]>";
}

def ArrayList::add(value) {
  def new_length := this.length + 1;
  this.ensure_capacity(new_length);
  this.contents[this.length] := value;
  this.length_.set(new_length);
  value;
}

def ArrayList::ensure_capacity(capacity) {
  def old_contents := this.contents;
  if not capacity < old_contents.length then {
    def new_contents := new MutablePrimitiveArray(capacity * 2);
    (0 .. this.length).for_each(fn (i) {
      new_contents[i] := old_contents[i];
    });
    this.contents_.set(new_contents);
  }
}

def ArrayList::iter {
  def self := this;
  def index_itr := (0 .. self.length).iter;
  new Iter {
    has_next -> index_itr.has_next,
    next -> self[index_itr.next]
  };
}

