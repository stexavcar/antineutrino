/*
 * A stream of bytes.
 */
protocol BlobStream;

def BlobStream.new -> new BlobStream(256);

def BlobStream.new(size) -> new BlobStream {
  data_ := new_ref(new MutablePrimitiveByteArray(size)),
  length_ := new_ref(0)
};

def (this is BlobStream).length -> this.length_.get();

def (this is BlobStream).capacity -> this.data.length;

def (this is BlobStream).data -> this.data_.get();

def (this is BlobStream).write_int32(word) {
  this.add(word & 16rFF);
  this.add((word >> 8) & 16rFF);
  this.add((word >> 16) & 16rFF);
  this.add((word >> 24) & 16rFF);
}

<<<<<<< HEAD
def (this: BlobStream).write_int16(word) {
  this.add(word & 16rFF);
  this.add((word >> 8) & 16rFF);
}

def (this: BlobStream).write_int8(word) {
  this.add(word & 16rFF);
}

def (this: BlobStream).write_data(data, from, to) {
=======
def (this is BlobStream).write_data(data, from, to) {
>>>>>>> Changed parameter type constraint syntax.
  for (def i : from .. to)
    this.add(data[i]);
}

def (this is BlobStream).write_data(data) -> this.write_data(data, 0, data.length);

def (this is BlobStream).write_c_string(str, length) {
  ref pos := 0;
  for (def c : str.ascii_characters) {
    this.add(c);
    pos := pos + 1;
  }
  if pos < length then {
    for (def i : pos .. length)
      this.add(0);
  }
}

def (this is BlobStream).write_c_string(str) -> this.write_c_string(str, str.length + 1);

def (this is BlobStream).extend_capacity(capacity) {
  def old_contents := this.data;
  def new_contents := new MutablePrimitiveByteArray(capacity * 2);
  for (def i : 0 .. this.length)
    new_contents[i] := old_contents[i];
  this.data_.set(new_contents);
}

def (this is BlobStream).pad_to(offset) {
  if this.length < offset then {
    for (def i : this.length .. offset)
      this.add(0);
  }
}

def (this is BlobStream).add(byte) {
  if this.length >= this.capacity then
    this.extend_capacity(this.length);
  def index := this.length;
  this.data[index] := byte;
  this.length_.set(index + 1);
}

def (this is BlobStream).get_blob {
  def result := new MutablePrimitiveByteArray(this.length);
  for (def i : 0 .. this.length)
    result[i] := this.data[i];
  result;
}

def (this is BlobStream).to_string -> "#<a BlobStream: " + this.length.to_string + ">";
